#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –≤–∏–±—Ä–æ–∫—Ä–µ—Å–ª–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –§–∏–ª–∞.
–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Å–∏—Å—Ç–µ–º—É –±–æ—Ç–∞.
"""

import json
import csv
import uuid
from datetime import datetime

def load_database():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞."""
    with open('data/database.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def save_database(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞."""
    with open('data/database.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def parse_csv_bookings():
    """–ü–∞—Ä—Å–∏—Ç CSV —Ñ–∞–π–ª —Å –∑–∞–ø–∏—Å—è–º–∏ –§–∏–ª–∞."""
    bookings = []
    
    with open("Coliving'25 _ –¶–∞—Ä—å-—Ç–∞–±–ª–∏—á–∫–∞ - –í–∏–±—Ä–æ –∫—Ä–µ—Å–ª–æ.csv", 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
    for line in lines[1:]:
        line = line.strip()
        if not line:
            continue
            
        # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç: "–≤—Ä–µ–º—è-–≤—Ä–µ–º—è,@username"
        parts = line.split(',')
        if len(parts) >= 2:
            time_range = parts[0].strip()
            username = parts[1].strip()
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            if '-' in time_range:
                start_time, end_time = time_range.split('-')
                start_time = start_time.strip()
                end_time = end_time.strip()
                
                # –î–æ–±–∞–≤–ª—è–µ–º :00 –µ—Å–ª–∏ –Ω–µ—Ç –º–∏–Ω—É—Ç
                if ':' not in start_time:
                    start_time += ':00'
                if ':' not in end_time:
                    end_time += ':00'
                
                bookings.append({
                    'date': '2025-08-02',  # 2 –∞–≤–≥—É—Å—Ç–∞
                    'start_time': start_time,
                    'end_time': end_time,
                    'username': username
                })
    
    return bookings

def find_device_slot(data, device_id, date, start_time, end_time):
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    devices = data.get('devices', [])
    
    for device in devices:
        if device['id'] == device_id:
            for i, slot in enumerate(device['time_slots']):
                if (slot['date'] == date and 
                    slot['start_time'] == start_time and 
                    slot['end_time'] == end_time):
                    return i, slot
    
    return None, None

def create_device_booking(data, device_id, slot_index, username, date, start_time, end_time):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
    booking_id = str(uuid.uuid4())
    
    booking = {
        "booking_id": booking_id,
        "device_id": device_id,
        "slot_index": slot_index,
        "guest_username": username,
        "guest_telegram_id": None,  # –ü–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        "date": date,
        "start_time": start_time,
        "end_time": end_time,
        "status": "confirmed",  # –°—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –§–∏–ª–∞
        "created_at": datetime.now().isoformat(),
        "migrated_from": "phil_table",
        "notes": f"Migrated from –§–∏–ª's emergency table due to bot downtime"
    }
    
    return booking

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏."""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∑–∞–ø–∏—Å–µ–π –Ω–∞ –≤–∏–±—Ä–æ–∫—Ä–µ—Å–ª–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –§–∏–ª–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = load_database()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    # –ü–∞—Ä—Å–∏–º CSV
    bookings_to_migrate = parse_csv_bookings()
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(bookings_to_migrate)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –§–∏–ª–∞")
    
    migrated_count = 0
    errors = []
    
    for booking_data in bookings_to_migrate:
        date = booking_data['date']
        start_time = booking_data['start_time']
        end_time = booking_data['end_time']
        username = booking_data['username']
        
        print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å: {username} –Ω–∞ {date} {start_time}-{end_time}")
        
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—Ç –≤ –≤–∏–±—Ä–æ–∫—Ä–µ—Å–ª–µ
        slot_index, slot = find_device_slot(data, 'vibro_chair', date, start_time, end_time)
        
        if slot is None:
            error_msg = f"‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {username}: {date} {start_time}-{end_time}"
            print(error_msg)
            errors.append(error_msg)
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —É–∂–µ —Å–ª–æ—Ç
        if slot.get('is_booked', False):
            error_msg = f"‚ö†Ô∏è –°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –¥–ª—è {username}: {date} {start_time}-{end_time}"
            print(error_msg)
            errors.append(error_msg)
            continue
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        booking = create_device_booking(
            data, 'vibro_chair', slot_index, username, 
            date, start_time, end_time
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if 'device_bookings' not in data:
            data['device_bookings'] = []
        
        data['device_bookings'].append(booking)
        
        # –ü–æ–º–µ—á–∞–µ–º —Å–ª–æ—Ç –∫–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        slot['is_booked'] = True
        slot['booked_by'] = username
        slot['booking_id'] = booking['booking_id']
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è {username}")
        migrated_count += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_database(data)
    
    print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {migrated_count}")
    
    if errors:
        print(f"‚ùå –û—à–∏–±–∫–∏ ({len(errors)}):")
        for error in errors:
            print(f"   {error}")
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –§–∏–ª–∞: {len(bookings_to_migrate)}")
    print(f"   - –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {migrated_count}")
    print(f"   - –û—à–∏–±–æ–∫: {len(errors)}")
    
    print("\nüí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ (/start)")

if __name__ == "__main__":
    main()