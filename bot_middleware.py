"""
Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ rate limiting
"""
import asyncio
import time
from functools import wraps
from typing import Dict, Optional
import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.error import RetryAfter, TimedOut, NetworkError

logger = logging.getLogger(__name__)

class RateLimiter:
    """Rate limiter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞"""
    
    def __init__(self, max_requests: int = 30, window_seconds: int = 60):
        self.max_requests = max_requests
        self.window_seconds = window_seconds
        self.requests: Dict[str, list] = {}
    
    def is_allowed(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à—ë–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = time.time()
        
        if user_id not in self.requests:
            self.requests[user_id] = []
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.requests[user_id] = [
            req_time for req_time in self.requests[user_id]
            if now - req_time < self.window_seconds
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.requests[user_id]) >= self.max_requests:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.requests[user_id].append(now)
        return True

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter
rate_limiter = RateLimiter()

def with_error_handling(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        try:
            return await func(update, context, *args, **kwargs)
        except RetryAfter as e:
            logger.warning(f"Rate limited, retry after {e.retry_after} seconds")
            await asyncio.sleep(e.retry_after)
            return await func(update, context, *args, **kwargs)
        except (TimedOut, NetworkError) as e:
            logger.error(f"Network error in {func.__name__}: {e}")
            if update.message:
                try:
                    await update.message.reply_text(
                        "üåä –¢–µ—á–µ–Ω–∏—è –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–≥–Ω–æ–≤–µ–Ω–∏–µ..."
                    )
                except Exception:
                    pass
        except Exception as e:
            logger.error(f"Unexpected error in {func.__name__}: {e}", exc_info=True)
            if update.message:
                try:
                    await update.message.reply_text(
                        "üêô –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ –≥–ª—É–±–∏–Ω–∞—Ö –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –∑–Ω–∞–µ—Ç –æ–± —ç—Ç–æ–º!"
                    )
                except Exception:
                    pass
    return wrapper

def with_rate_limiting(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è rate limiting"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = str(update.effective_user.id)
        
        if not rate_limiter.is_allowed(user_id):
            logger.warning(f"Rate limit exceeded for user {user_id}")
            if update.message:
                await update.message.reply_text(
                    "üåä –ü–æ—Ç–æ–∫–∏ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º..."
                )
            return
        
        return await func(update, context, *args, **kwargs)
    return wrapper

async def telegram_retry(func, *args, max_retries=3, **kwargs):
    """–§—É–Ω–∫—Ü–∏—è retry –¥–ª—è Telegram API calls"""
    for attempt in range(max_retries):
        try:
            return await func(*args, **kwargs)
        except RetryAfter as e:
            if attempt == max_retries - 1:
                raise
            logger.info(f"Rate limited, waiting {e.retry_after}s (attempt {attempt + 1})")
            await asyncio.sleep(e.retry_after)
        except (TimedOut, NetworkError) as e:
            if attempt == max_retries - 1:
                raise
            wait_time = 2 ** attempt  # Exponential backoff
            logger.info(f"Network error, retrying in {wait_time}s (attempt {attempt + 1})")
            await asyncio.sleep(wait_time)
    
    raise Exception(f"Max retries ({max_retries}) exceeded")