"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Telegram –±–æ—Ç–∞
"""
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from bot.constants import (
    MASTER_ROLE, CLIENT_ROLE, MY_SLOTS, ADD_SLOTS, MY_PROFILE, EDIT_PROFILE,
    VIEW_MASTERS, VIEW_DEVICES, VIEW_FREE_SLOTS, MY_BOOKINGS, BACK_TO_MENU, CHANGE_ROLE
)


def get_role_selection_keyboard() -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏.
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏
    """
    return ReplyKeyboardMarkup(
        [[MASTER_ROLE, CLIENT_ROLE]], 
        resize_keyboard=True, 
        one_time_keyboard=True
    )


def get_master_keyboard() -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞
    """
    return ReplyKeyboardMarkup([
        [MY_SLOTS, ADD_SLOTS],
        [MY_PROFILE, EDIT_PROFILE],
        [CHANGE_ROLE, BACK_TO_MENU]
    ], resize_keyboard=True)


def get_client_keyboard() -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
    """
    return ReplyKeyboardMarkup([
        [VIEW_MASTERS, VIEW_DEVICES],
        [VIEW_FREE_SLOTS, MY_BOOKINGS],
        [CHANGE_ROLE]
    ], resize_keyboard=True)


def create_slot_management_keyboard(slots: list) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞–º–∏.
    
    Args:
        slots: –°–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
        
    Returns:
        InlineKeyboardMarkup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = []
    
    for i, slot in enumerate(slots):
        date = slot.get("date", "")
        start_time = slot.get("start_time", "")
        end_time = slot.get("end_time", "")
        location = slot.get("location", "")
        
        slot_text = f"{date} {start_time}-{end_time} ({location})"
        callback_data = f"delete_slot_{i}"
        
        keyboard.append([InlineKeyboardButton(
            f"‚ùå {slot_text}", 
            callback_data=callback_data
        )])
    
    return InlineKeyboardMarkup(keyboard)


def create_master_selection_keyboard(masters: list) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞.
    
    Args:
        masters: –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
        
    Returns:
        InlineKeyboardMarkup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = []
    
    for master in masters:
        master_id = master.get("telegram_id", "")
        name = master.get("name", "–ú–∞—Å—Ç–µ—Ä")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        available_slots = count_available_slots(master)
        
        button_text = f"{name} (üü¢ {available_slots} —Å–ª–æ—Ç–æ–≤)"
        callback_data = f"select_master_{master_id}"
        
        keyboard.append([InlineKeyboardButton(
            button_text,
            callback_data=callback_data
        )])
    
    return InlineKeyboardMarkup(keyboard)


def create_booking_slots_keyboard(slots: list, master_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤.
    
    Args:
        slots: –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        master_id: ID –º–∞—Å—Ç–µ—Ä–∞
        
    Returns:
        InlineKeyboardMarkup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = []
    
    for i, slot in enumerate(slots):
        date = slot.get("date", "")
        start_time = slot.get("start_time", "")
        end_time = slot.get("end_time", "")
        location = slot.get("location", "")
        
        slot_text = f"{date} {start_time}-{end_time} ‚Ä¢ {location}"
        callback_data = f"book_slot_{master_id}_{i}"
        
        keyboard.append([InlineKeyboardButton(
            f"üìÖ {slot_text}",
            callback_data=callback_data
        )])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–∞—Å—Ç–µ—Ä–æ–≤"
    keyboard.append([InlineKeyboardButton(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Ç–µ—Ä–∞–º",
        callback_data="back_to_masters"
    )])
    
    return InlineKeyboardMarkup(keyboard)


def create_booking_confirmation_keyboard(booking_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–º.
    
    Args:
        booking_id: ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        InlineKeyboardMarkup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{booking_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{booking_id}")
        ]
    ]
    
    return InlineKeyboardMarkup(keyboard)


def count_available_slots(master: dict) -> int:
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ).
    
    Args:
        master: –î–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
        
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    """
    from datetime import datetime
    
    slots = master.get("time_slots", [])
    bookings = master.get("bookings", [])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    now = datetime.now()
    
    available_count = 0
    for slot in slots:
        slot_date = slot.get("date")
        slot_start_time = slot.get("start_time")
        
        if not slot_date or not slot_start_time:
            continue
            
        try:
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            slot_datetime = datetime.strptime(f"{slot_date} {slot_start_time}", "%Y-%m-%d %H:%M")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–ª–æ—Ç—ã
            if slot_datetime <= now:
                continue
                
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ—Ç
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–ª–æ—Ç
        is_booked = any(
            booking.get("slot_date") == slot.get("date") and
            booking.get("slot_start_time") == slot.get("start_time") and
            booking.get("status") in ["pending", "confirmed"]
            for booking in bookings
        )
        if not is_booked:
            available_count += 1
    
    return available_count