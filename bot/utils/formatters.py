"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""
from datetime import datetime
from typing import Dict, List
from bot.constants import STATUS_ICONS, STATUS_TEXTS


def format_date_for_user(date_str: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        date_str: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
    Returns:
        str: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 5 –∞–≤–≥—É—Å—Ç–∞"
    """
    if not date_str:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
    
    try:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        
        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–µ–≤
        weekdays = [
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", 
            "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        ]
        months = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]
        
        weekday = weekdays[date_obj.weekday()]
        day = date_obj.day
        month = months[date_obj.month - 1]
        
        return f"{weekday} {day} {month}"
    except ValueError:
        return f"–î–∞—Ç–∞: {date_str}"


def format_slot_for_user(slot: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ª–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        slot: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    date_formatted = format_date_for_user(slot.get("date", ""))
    start_time = slot.get("start_time", "")
    end_time = slot.get("end_time", "")
    location = slot.get("location", "–ó–∞–ø–æ–≤–µ–¥–Ω–∏–∫")
    
    return f"üìÖ {date_formatted} —Å {start_time} –¥–æ {end_time} ‚Ä¢ üìç {location}"


def format_slots_list(slots: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        slots: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å–æ —Å–ª–æ—Ç–∞–º–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    """
    if not slots:
        return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"
    
    formatted_slots = []
    for i, slot in enumerate(slots, 1):
        slot_text = format_slot_for_user(slot)
        formatted_slots.append(f"{i}. {slot_text}")
    
    return "\n".join(formatted_slots)


def format_booking_for_user(booking_info: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É.
    
    Args:
        booking_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    status = booking_info.get("status", "pending")
    status_icon = STATUS_ICONS.get(status, "‚ùì")
    status_text = STATUS_TEXTS.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    master_name = booking_info.get("master_name", "–ú–∞—Å—Ç–µ—Ä")
    date_formatted = format_date_for_user(booking_info.get("date", ""))
    start_time = booking_info.get("start_time", "")
    end_time = booking_info.get("end_time", "")
    location = booking_info.get("location", "–ó–∞–ø–æ–≤–µ–¥–Ω–∏–∫")
    
    result = (
        f"{status_icon} **{master_name}**\n"
        f"üìÖ –í—Ä–µ–º—è: {date_formatted} —Å {start_time} –¥–æ {end_time}\n"
        f"üìç –ú–µ—Å—Ç–æ: {location}\n"
        f"üî∏ –°—Ç–∞—Ç—É—Å: {status_text}"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if status == "declined" and booking_info.get("booking", {}).get("decline_reason"):
        reason = booking_info["booking"]["decline_reason"]
        result += f"\nüí¨ –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    
    return result


def format_master_profile(master: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        master: –î–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    """
    name = master.get("name", "–ú–∞—Å—Ç–µ—Ä")
    fantasy_description = master.get("fantasy_description", "")
    original_description = master.get("original_description", "")
    services = master.get("services", [])
    slots_count = len(master.get("time_slots", []))
    
    services_text = ", ".join(services) if services else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    return (
        f"üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, {name}:**\n\n"
        f"üé≠ **–§—ç–Ω—Ç–µ–∑–∏-–æ–ø–∏—Å–∞–Ω–∏–µ:**\n{fantasy_description}\n\n"
        f"üìù **–¢–≤–æ–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞:**\n{original_description}\n\n"
        f"üõ† **–£—Å–ª—É–≥–∏:** {services_text}\n"
        f"‚è∞ **–°–ª–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:** {slots_count}"
    )


def format_time_range(start_time: str, end_time: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω.
    
    Args:
        start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    """
    return f"{start_time}-{end_time}"


def truncate_text(text: str, max_length: int = 100) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        
    Returns:
        str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text or len(text) <= max_length:
        return text
    
    return text[:max_length-3] + "..."