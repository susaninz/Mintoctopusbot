#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
"""
import logging
import os
from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
MASTER_ROLE = "–Ø –º–Ω—É üêô"
CLIENT_ROLE = "–•–æ—á—É, —á—Ç–æ–±—ã –º–µ–Ω—è –ø–æ–º—è–ª–∏ üôè"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏."""
    reply_keyboard = [[MASTER_ROLE, CLIENT_ROLE]]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.mention_html()}! üêô\n\n"
        "–Ø –º—É–¥—Ä—ã–π –û—Å—å–º–∏–Ω–æ–≥, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:",
        reply_markup=markup,
        parse_mode='HTML'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    text = update.message.text
    user_id = update.effective_user.id
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{text}'")
    
    if text == MASTER_ROLE:
        await update.message.reply_text(
            "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º! üåä\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ: –∏–º—è, –æ–ø—ã—Ç, —É—Å–ª—É–≥–∏, —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ª–æ–∫–∞—Ü–∏–∏."
        )
    elif text == CLIENT_ROLE:
        await update.message.reply_text(
            "–ß—É–¥–µ—Å–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫ –∏—Å—Ü–µ–ª–µ–Ω–∏—è! üåø\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª."
        )
    else:
        await update.message.reply_text(
            f"–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}'\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    telegram_token = os.getenv("TELEGRAM_TOKEN")
    if not telegram_token:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ .env —Ñ–∞–π–ª–µ.")
        return

    application = Application.builder().token(telegram_token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("üêô –ü—Ä–æ—Å—Ç–æ–π –æ—Å—å–º–∏–Ω–æ–≥ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()