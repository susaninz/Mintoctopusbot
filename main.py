import logging
import os
import json
from typing import Dict

from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, Update, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from services.gpt_service import GPTService

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ ---
MASTER_ROLE = "–Ø –º–Ω—É üêô"
CLIENT_ROLE = "–•–æ—á—É, —á—Ç–æ–±—ã –º–µ–Ω—è –ø–æ–º—è–ª–∏ üôè"

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
MY_SLOTS = "–ú–æ–∏ —Å–ª–æ—Ç—ã üìã"
ADD_SLOTS = "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç—ã ‚ûï"
MY_PROFILE = "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§"

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ—Å—Ç–µ–π  
VIEW_MASTERS = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ üë•"
MY_BOOKINGS = "–ú–æ–∏ –∑–∞–ø–∏—Å–∏ üìÖ"

# –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
BACK_TO_MENU = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†"
CHANGE_ROLE = "–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å üîÑ"

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ---
# (—É–±—Ä–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ user_states)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã ---
gpt_service = GPTService()

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_states: Dict[str, Dict] = {}

# --- –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ---
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        if os.path.exists("data/database.json"):
            with open("data/database.json", "r", encoding="utf-8") as f:
                return json.load(f)
    except:
        pass
    return {"masters": {}, "users": {}}

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª."""
    os.makedirs("data", exist_ok=True)
    with open("data/database.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_state(user_id: str) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ."""
    if user_id not in user_states:
        user_states[user_id] = {"role": None, "awaiting": None}
    return user_states[user_id]


def get_master_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."""
    return ReplyKeyboardMarkup([
        [MY_SLOTS, ADD_SLOTS],
        [MY_PROFILE, CHANGE_ROLE],
        [BACK_TO_MENU]
    ], resize_keyboard=True)


def get_client_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞."""
    return ReplyKeyboardMarkup([
        [VIEW_MASTERS],
        [MY_BOOKINGS, CHANGE_ROLE],
        [BACK_TO_MENU]
    ], resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏."""
    reply_keyboard = [[MASTER_ROLE, CLIENT_ROLE]]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.mention_html()}! –Ø –º—É–¥—Ä—ã–π –û—Å—å–º–∏–Ω–æ–≥, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:",
        reply_markup=markup,
        parse_mode='HTML'
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = str(update.effective_user.id)
    user_states[user_id] = {"role": None, "awaiting": None}


async def handle_role_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_choice = update.message.text
    user_id = str(update.effective_user.id)
    user_state = get_user_state(user_id)
    
    if user_choice == MASTER_ROLE:
        user_state["role"] = "master"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä
        data = load_data()
        existing_master = data.get("masters", {}).get(user_id)
        if existing_master:
            await update.message.reply_text(
                f"–û, {existing_master['name']}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫! üåä\n\n"
                f"–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
                reply_markup=get_master_menu_keyboard()
            )
        else:
            await update.message.reply_text(
                "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç, –∫–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç, "
                "–∫–∞–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∏ –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –∏ –≥–¥–µ —Ç—ã —Å–≤–æ–±–æ–¥–µ–Ω? "
                "–Ø –≤—Å—ë –ø–æ–π–º—É –∏ –æ—Ñ–æ—Ä–º–ª—é –≤ –ª—É—á—à–µ–º –≤–∏–¥–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
            user_state["awaiting"] = "master_profile"
        
    elif user_choice == CLIENT_ROLE:
        user_state["role"] = "client"
        
        await update.message.reply_text(
            "–ß—É–¥–µ—Å–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫ –∏—Å—Ü–µ–ª–µ–Ω–∏—è! üåø\n\n"
            "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=get_client_menu_keyboard()
        )
    else:
        await update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.")


async def process_master_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –º–∞—Å—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ GPT."""
    user_id = str(update.effective_user.id)
    profile_text = update.message.text
    
    await update.message.reply_text(
        "–•–º... –ø–æ–∑–≤–æ–ª—å –º–Ω–µ –≤–≥–ª—è–¥–µ—Ç—å—Å—è –≤ –≥–ª—É–±–∏–Ω—ã —Ç–≤–æ–∏—Ö —Å–ª–æ–≤... üêô\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–≥–Ω–æ–≤–µ–Ω–∏–π..."
    )
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ GPT
        extracted_data, fantasy_description = gpt_service.process_master_profile(profile_text)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –º–∞—Å—Ç–µ—Ä–∞
        master_name = extracted_data.get("name") or update.effective_user.first_name or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Ç–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        data = load_data()
        data.setdefault("masters", {})[user_id] = {
            "name": master_name,
            "original_description": profile_text,
            "fantasy_description": fantasy_description,
            "services": extracted_data.get("services", []),
            "time_slots": extracted_data.get("time_slots", []),
            "is_active": True,
            "bookings": []
        }
        save_data(data)
        success = True
        
        if success:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Ç–µ—Ä—É
            response_text = (
                f"üåä –ì–ª—É–±–∏–Ω—ã —Ä–∞—Å–∫—Ä—ã–ª–∏ –º–Ω–µ —Ç–≤–æ—é —Å—É—Ç—å, {master_name}!\n\n"
                f"**–¢–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–µ:**\n{fantasy_description}\n\n"
                f"**–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:** {', '.join(extracted_data.get('services', []))}\n"
                f"**–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:** {len(extracted_data.get('time_slots', []))} –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\n"
                "–¢–µ–ø–µ—Ä—å –≥–æ—Å—Ç–∏ —Å–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±—è! –í—ã–±–µ—Ä–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:"
            )
            
            await update.message.reply_text(
                response_text, 
                parse_mode='Markdown',
                reply_markup=get_master_menu_keyboard()
            )
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –º–∞—Å—Ç–µ—Ä {master_name} (ID: {user_id})")
            
        else:
            await update.message.reply_text(
                "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —Ä—è–¥–∞—Ö –Ω–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤. "
                "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=get_master_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∫–µ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞: {e}")
        await update.message.reply_text(
            "–û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ –≥–ª—É–±–∏–Ω–∞—Ö –º–æ–µ–≥–æ —Ä–∞–∑—É–º–∞... üòî\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_master_menu_keyboard()
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    user_state = get_user_state(user_id)
    user_state["awaiting"] = None


async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
    user_choice = update.message.text
    user_id = str(update.effective_user.id)
    user_state = get_user_state(user_id)
    
    if user_choice == MY_SLOTS:
        await show_my_slots(update, context)
    elif user_choice == ADD_SLOTS:
        await handle_add_slots_request(update, context)
    elif user_choice == MY_PROFILE:
        await show_my_profile(update, context)
    elif user_choice == VIEW_MASTERS:
        await show_masters_list(update, context)
    elif user_choice == MY_BOOKINGS:
        await show_my_bookings(update, context)
    elif user_choice == CHANGE_ROLE:
        await start(update, context)
    elif user_choice == BACK_TO_MENU:
        if user_state.get("role") == "master":
            await update.message.reply_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞:",
                reply_markup=get_master_menu_keyboard()
            )
        elif user_state.get("role") == "client":
            await update.message.reply_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≥–æ—Å—Ç—è:",
                reply_markup=get_client_menu_keyboard()
            )
        else:
            await start(update, context)
    else:
        await update.message.reply_text(
            "–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."
        )


async def show_my_slots(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞."""
    user_id = str(update.effective_user.id)
    data = load_data()
    master = data.get("masters", {}).get(user_id)
    
    if not master:
        await update.message.reply_text(
            "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–∞—Å—Ç–µ—Ä.",
            reply_markup=get_master_menu_keyboard()
        )
        return
    
    time_slots = master.get("time_slots", [])
    # –£–ø—Ä–æ—â–∞–µ–º - –ø–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
    available_slots = time_slots
    
    if not time_slots:
        await update.message.reply_text(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –î–æ–±–∞–≤—å –∏—Ö —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç—ã'!",
            reply_markup=get_master_menu_keyboard()
        )
        return
    
    response = f"üìã **–¢–≤–æ–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã, {master['name']}:**\n\n"
    
    for i, slot in enumerate(time_slots):
        slot_id = f"{user_id}_{i}"
        status = "üü¢ –°–≤–æ–±–æ–¥–µ–Ω" if any(s.get("slot_id") == slot_id for s in available_slots) else "üî¥ –ó–∞–Ω—è—Ç"
        
        response += (
            f"**{i+1}.** {slot.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')} "
            f"{slot.get('start_time', '??:??')} - {slot.get('end_time', '??:??')}\n"
            f"üìç {slot.get('location', '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')} | {status}\n\n"
        )
    
    response += "–ß–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç—ã' –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞."
    
    await update.message.reply_text(
        response,
        parse_mode='Markdown',
        reply_markup=get_master_menu_keyboard()
    )


async def show_my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞."""
    user_id = str(update.effective_user.id)
    data = load_data()
    master = data.get("masters", {}).get(user_id)
    
    if not master:
        await update.message.reply_text(
            "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–∞—Å—Ç–µ—Ä.",
            reply_markup=get_master_menu_keyboard()
        )
        return
    
    response = (
        f"üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, {master['name']}:**\n\n"
        f"üé≠ **–§—ç–Ω—Ç–µ–∑–∏-–æ–ø–∏—Å–∞–Ω–∏–µ:**\n{master['fantasy_description']}\n\n"
        f"üìù **–¢–≤–æ–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞:**\n{master['original_description']}\n\n"
        f"üõ† **–£—Å–ª—É–≥–∏:** {', '.join(master.get('services', []))}\n"
        f"‚è∞ **–°–ª–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:** {len(master.get('time_slots', []))}"
    )
    
    await update.message.reply_text(
        response,
        parse_mode='Markdown',
        reply_markup=get_master_menu_keyboard()
    )


async def handle_add_slots_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤."""
    await update.message.reply_text(
        "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "‚Ä¢ '–ó–∞–≤—Ç—Ä–∞ —Å 14:00 –¥–æ 16:00 –≤ –±–∞–Ω–µ'\n"
        "‚Ä¢ '–í —Å—É–±–±–æ—Ç—É –≤ 18:00 –Ω–∞ –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞ –≤ –≥–ª—ç–º–ø–∏–Ω–≥–µ'\n"
        "‚Ä¢ '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Å 10 –¥–æ 12 –≤ —Å–ø–∞—Å–∞–ª–∫–µ'\n\n"
        "–Ø –ø–æ–π–º—É –∏ –¥–æ–±–∞–≤–ª—é –≤—Å—ë –≤ —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!",
        reply_markup=ReplyKeyboardRemove()
    )
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ GPT


async def show_masters_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤."""
    data = load_data()
    masters = [master for master in data.get("masters", {}).values() if master.get("is_active", True)]
    
    if not masters:
        await update.message.reply_text(
            "–ü–æ–∫–∞ –≤ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤. –ù–æ —Å–∫–æ—Ä–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è, –∫–∞–∫ —Ä–∞—Å—Å–≤–µ—Ç –Ω–∞–¥ —Ç–∏—Ö–∏–º–∏ –≤–æ–¥–∞–º–∏...",
            reply_markup=get_client_menu_keyboard()
        )
        return
    
    response = "üë• **–ú–∞—Å—Ç–µ—Ä–∞ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞:**\n\n"
    
    for i, master in enumerate(masters, 1):
        # –£–ø—Ä–æ—â–∞–µ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤
        available_slots = master.get("time_slots", [])
        response += (
            f"**{i}. {master['name']}**\n"
            f"{master['fantasy_description']}\n"
            f"üõ† {', '.join(master.get('services', []))}\n"
            f"üü¢ –°–ª–æ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(available_slots)}\n\n"
        )
    
    await update.message.reply_text(
        response,
        parse_mode='Markdown',
        reply_markup=get_client_menu_keyboard()
    )


async def show_my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≥–æ—Å—Ç—è."""
    await update.message.reply_text(
        "üìÖ –¢–≤–æ–∏ –∑–∞–ø–∏—Å–∏:\n\n–ü–æ–∫–∞ —É —Ç–µ–±—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∫ –º–∞—Å—Ç–µ—Ä–∞–º.",
        reply_markup=get_client_menu_keyboard()
    )


async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏."""
    user_id = str(update.effective_user.id)
    text = update.message.text
    user_state = get_user_state(user_id)
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{text}'")
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_state}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞
    if user_state.get("awaiting") == "master_profile":
        logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞")
        await process_master_profile(update, context)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏
    if text in [MASTER_ROLE, CLIENT_ROLE]:
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏: {text}")
        await handle_role_choice(update, context)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é")
    await handle_menu_buttons(update, context)


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    telegram_token = os.getenv("TELEGRAM_TOKEN")
    if not telegram_token:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ .env —Ñ–∞–π–ª–µ.")
        return

    application = Application.builder().token(telegram_token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_messages))

    logger.info("–û—Å—å–º–∏–Ω–æ–≥ —Ä–∞—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏ —â—É–ø–∞–ª—å—Ü–∞ –∏ –≤—ã—Ö–æ–¥–∏—Ç –≤ –æ–Ω–ª–∞–π–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()