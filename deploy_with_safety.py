#!/usr/bin/env python3
"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–ø–ª–æ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import json
import subprocess
import sys
import os
from datetime import datetime
from services.backup_manager import backup_manager
from services.safe_data_manager import safe_data_manager

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)
        print(f"‚úÖ {description} - –£—Å–ø–µ—à–Ω–æ")
        if result.stdout:
            print(f"   –í—ã–≤–æ–¥: {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –û—à–∏–±–∫–∞")
        print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        print(f"   –í—ã–≤–æ–¥: {e.stdout}")
        print(f"   –û—à–∏–±–∫–∏: {e.stderr}")
        return False

def check_data_integrity():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    health_status = safe_data_manager.get_health_status()
    
    if not health_status.get('database_valid', False):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏!")
        return False
    
    if not health_status.get('has_critical_data', False):
        print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö!")
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–ø–ª–æ–π? (y/N): ")
        if response.lower() != 'y':
            return False
    
    stats = health_status.get('data_stats', {})
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   - –ú–∞—Å—Ç–µ—Ä–æ–≤: {stats.get('masters', 0)}")
    print(f"   - –ó–∞–ø–∏—Å–µ–π –Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–≤: {stats.get('bookings', 0)}")
    print(f"   - –ó–∞–ø–∏—Å–µ–π –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {stats.get('device_bookings', 0)}")
    print(f"   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {stats.get('devices', 0)}")
    print(f"   - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {stats.get('file_size', 0)} –±–∞–π—Ç")
    
    return True

def create_deployment_backup():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º."""
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º...")
    
    backup_path = backup_manager.create_pre_deployment_backup()
    if backup_path:
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        return backup_path
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é!")
        return None

def cleanup_old_backups():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏."""
    print("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
    removed_count = backup_manager.cleanup_old_backups(keep_days=7)
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")

def verify_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ git —Å—Ç–∞—Ç—É—Å–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    result = subprocess.run("git status --porcelain", shell=True, capture_output=True, text=True)
    if result.stdout.strip():
        print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        print(result.stdout)
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–ø–ª–æ–π? (y/N): ")
        if response.lower() != 'y':
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ unpushed –∫–æ–º–º–∏—Ç—ã
    result = subprocess.run("git log --oneline origin/main..HEAD", shell=True, capture_output=True, text=True)
    if result.stdout.strip():
        print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–ø—É—à–Ω—É—Ç—ã–µ –∫–æ–º–º–∏—Ç—ã:")
        print(result.stdout)
        response = input("–ó–∞–ø—É—à–∏—Ç—å –∫–æ–º–º–∏—Ç—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
        if response.lower() == 'y':
            if not run_command("git push origin main", "–ü—É—à –∫–æ–º–º–∏—Ç–æ–≤"):
                return False
        else:
            return False
    
    return True

def test_bot_locally():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ."""
    print("üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–æ—Ç–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        result = subprocess.run(
            "python3 -c 'import working_bot; print(\"Bot imports successfully\")'",
            shell=True,
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if result.returncode == 0:
            print("‚úÖ –ò–º–ø–æ—Ä—Ç –±–æ—Ç–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–æ—Ç–∞: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–µ—Å—Ç –±–æ—Ç–∞ –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        return False

def deploy_to_railway():
    """–î–µ–ø–ª–æ–∏—Ç –Ω–∞ Railway."""
    print("üöÄ –î–µ–ø–ª–æ–π –Ω–∞ Railway...")
    return run_command("railway up", "–î–µ–ø–ª–æ–π Railway")

def verify_deployment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–µ–ø–ª–æ—è."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–ª–æ—è...")
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    import time
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ (30 —Å–µ–∫—É–Ω–¥)...")
    time.sleep(30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º healthcheck
    healthcheck_result = run_command(
        "curl -s https://mintoctopusbot-production.up.railway.app/health",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ healthcheck"
    )
    
    if healthcheck_result:
        print("‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω - –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ healthcheck")
        return True
    else:
        print("‚ùå –î–µ–ø–ª–æ–π –Ω–µ—É—Å–ø–µ—à–µ–Ω - –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        return False

def rollback_deployment(backup_path):
    """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–ø–ª–æ–π –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º."""
    print(f"üîÑ –û—Ç–∫–∞—Ç –¥–µ–ø–ª–æ—è...")
    
    print("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç –∫–æ–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    print("üì¶ –î–ª—è –æ—Ç–∫–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:")
    print(f"   {backup_path}")
    print("\nüîß –î–ª—è –æ—Ç–∫–∞—Ç–∞ –∫–æ–¥–∞:")
    print("   1. git log --oneline")
    print("   2. git reset --hard <hash_–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ_—Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ_–∫–æ–º–º–∏—Ç–∞>")
    print("   3. git push --force origin main")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è."""
    print("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–ø–ª–æ–π Mintoctopus Bot")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if not check_data_integrity():
        print("‚ùå –î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏")
        sys.exit(1)
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = create_deployment_backup()
    if not backup_path:
        print("‚ùå –î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        sys.exit(1)
    
    # 3. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
    cleanup_old_backups()
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º git —Å—Ç–∞—Ç—É—Å
    if not verify_git_status():
        print("‚ùå –î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å git")
        sys.exit(1)
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
    if not test_bot_locally():
        print("‚ùå –î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω - –±–æ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç")
        sys.exit(1)
    
    # 6. –î–µ–ø–ª–æ–∏–º –Ω–∞ Railway
    if not deploy_to_railway():
        print("‚ùå –î–µ–ø–ª–æ–π –Ω–µ—É—Å–ø–µ—à–µ–Ω")
        rollback_deployment(backup_path)
        sys.exit(1)
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–ª–æ–π
    if not verify_deployment():
        print("‚ùå –î–µ–ø–ª–æ–π –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É")
        rollback_deployment(backup_path)
        sys.exit(1)
    
    # 8. –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("\nüéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    health_status = safe_data_manager.get_health_status()
    print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã: {'‚úÖ' if health_status.get('database_valid') else '‚ùå'}")
    print(f"   - –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {health_status.get('total_backups', 0)}")
    print(f"   - –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: {backup_path}")
    print(f"   - –í—Ä–µ–º—è –¥–µ–ø–ª–æ—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()