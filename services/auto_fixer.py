"""
Auto Fixer - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–æ–≤
"""

import os
import re
import json
import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime
import difflib
from services.safe_data_manager import safe_data_manager

logger = logging.getLogger(__name__)

class AutoFixer:
    def __init__(self):
        self.safe_fixes = {
            'typo_fixes': self._fix_typos,
            'emoji_fixes': self._fix_emojis,
            'formatting_fixes': self._fix_formatting,
            'link_fixes': self._fix_links,
            'case_fixes': self._fix_case_issues
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        self.typo_patterns = {
            # –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —Ä—É—Å—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ
            r'\b–Ω–µ —Ä–∞–±–æ—Ç–µ—Ç\b': '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
            r'\b—Ä–∞–±–æ—Ç–µ—Ç\b': '—Ä–∞–±–æ—Ç–∞–µ—Ç',
            r'\b–∑–∞–ø–∏—Å–∞—Ç—Å—è\b': '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
            r'\b–∑–∞–ø–∏—Å–∞—Ç—Å—è\b': '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
            r'\b–º–∞—Å—Å–æ–∂\b': '–º–∞—Å—Å–∞–∂',
            r'\b–≤–∏–±—Ä–æ–∫—Ä–µ—Å–ª–æ\b': '–≤–∏–±—Ä–æ–∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ',
            r'\b—Å–ª–æ—Ç—ã\b': '—Å–ª–æ—Ç—ã',
            r'\b–º–∞—Å—Ç–µ—Ä–∞\b': '–º–∞—Å—Ç–µ—Ä–∞',
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –æ–ø–µ—á–∞—Ç–∫–∏
            r'\bteh\b': 'the',
            r'\badn\b': 'and',
            r'\byuo\b': 'you'
        }
        
        self.emoji_fixes = {
            'massage': 'üíÜ',
            'chair': 'ü™ë',
            'device': 'üì±',
            'booking': 'üìÖ',
            'master': 'üë®‚Äç‚öïÔ∏è',
            'error': '‚ùå',
            'success': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è'
        }
        
        # –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        self.safe_files = [
            'working_bot.py',
            'services/gpt_service.py',
            'services/bug_reporter.py'
        ]
        
        # –û–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã - –ù–ï —Ç—Ä–æ–≥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        self.dangerous_patterns = [
            r'import\s+',  # –ò–º–ø–æ—Ä—Ç—ã
            r'def\s+\w+\(',  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
            r'class\s+\w+',  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
            r'async\s+def',  # Async —Ñ—É–Ω–∫—Ü–∏–∏
            r'await\s+',  # Await –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            r'callback_data',  # Callback –ª–æ–≥–∏–∫–∞
            r'database\.json',  # –†–∞–±–æ—Ç–∞ —Å –ë–î
            r'BOT_TOKEN',  # –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏
            r'OPENAI_API_KEY'
        ]
    
    def can_auto_fix(self, bug_analysis: Dict) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥"""
        if not bug_analysis.get('auto_fixable', False):
            return False
        
        description = bug_analysis.get('original_description', '').lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–∏–ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        safe_keywords = [
            '–æ–ø–µ—á–∞—Ç–∫–∞', 'typo', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç', '—Ç–µ–∫—Å—Ç',
            'emoji', '—ç–º–æ–¥–∑–∏', '—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            '—Å—Å—ã–ª–∫–∞', 'link', '—Ä–µ–≥–∏—Å—Ç—Ä'
        ]
        
        return any(keyword in description for keyword in safe_keywords)
    
    def auto_fix_bug(self, bug_analysis: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞"""
        try:
            logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ—Ñ–∏–∫—Å –¥–ª—è –±–∞–≥–∞ {bug_analysis.get('bug_id')}")
            
            fix_type = self._determine_fix_type(bug_analysis)
            
            if fix_type not in self.safe_fixes:
                return self._create_fix_result(False, "–¢–∏–ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            fix_function = self.safe_fixes[fix_type]
            result = fix_function(bug_analysis)
            
            if result['success']:
                # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
                safe_data_manager.backup_manager.create_backup("auto_fix_before")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                self._log_fix_action(bug_analysis, result)
                
                logger.info(f"‚úÖ –ê–≤—Ç–æ—Ñ–∏–∫—Å –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –±–∞–≥–∞ {bug_analysis.get('bug_id')}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞: {e}")
            return self._create_fix_result(False, f"–û—à–∏–±–∫–∞: {e}")
    
    def _determine_fix_type(self, bug_analysis: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        description = bug_analysis.get('original_description', '').lower()
        
        if any(word in description for word in ['–æ–ø–µ—á–∞—Ç–∫–∞', 'typo', '–Ω–∞–ø–∏—Å–∞–Ω–æ']):
            return 'typo_fixes'
        elif any(word in description for word in ['emoji', '—ç–º–æ–¥–∑–∏', '–∑–Ω–∞—á–æ–∫']):
            return 'emoji_fixes'
        elif any(word in description for word in ['—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–æ—Ç—Å—Ç—É–ø', '–ø—Ä–æ–±–µ–ª']):
            return 'formatting_fixes'
        elif any(word in description for word in ['—Å—Å—ã–ª–∫–∞', 'link', 'url']):
            return 'link_fixes'
        elif any(word in description for word in ['—Ä–µ–≥–∏—Å—Ç—Ä', '–∑–∞–≥–ª–∞–≤–Ω', '—Å—Ç—Ä–æ—á–Ω']):
            return 'case_fixes'
        else:
            return 'unknown'
    
    def _fix_typos(self, bug_analysis: Dict) -> Dict:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç–∞—Ö"""
        try:
            modified_files = []
            changes_made = []
            
            # –ò—â–µ–º –æ–ø–µ—á–∞—Ç–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö —Å —Ç–µ–∫—Å—Ç–∞–º–∏
            for file_path in self.safe_files:
                if not os.path.exists(file_path):
                    continue
                
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                original_content = content
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫
                for pattern, replacement in self.typo_patterns.items():
                    if re.search(pattern, content, re.IGNORECASE):
                        content = re.sub(pattern, replacement, content, flags=re.IGNORECASE)
                        changes_made.append(f"{pattern} ‚Üí {replacement}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                if content != original_content:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(content)
                    modified_files.append(file_path)
                    logger.info(f"üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—á–∞—Ç–∫–∏ –≤ {file_path}")
            
            if modified_files:
                return self._create_fix_result(
                    True, 
                    f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —Ñ–∞–π–ª–∞—Ö: {', '.join(modified_files)}",
                    modified_files,
                    changes_made
                )
            else:
                return self._create_fix_result(False, "–û–ø–µ—á–∞—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫: {e}")
            return self._create_fix_result(False, f"–û—à–∏–±–∫–∞: {e}")
    
    def _fix_emojis(self, bug_analysis: Dict) -> Dict:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç emoji –≤ —Ç–µ–∫—Å—Ç–∞—Ö"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è emoji
            # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
            
            description = bug_analysis.get('original_description', '')
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –º–∞—Å—Å–∞–∂ –±–µ–∑ emoji
            if '–º–∞—Å—Å–∞–∂' in description.lower() and 'üíÜ' not in description:
                # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã –≤ —Ñ–∞–π–ª–∞—Ö
                return self._create_fix_result(
                    True,
                    "–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ emoji –¥–ª—è –º–∞—Å—Å–∞–∂–∞",
                    ["working_bot.py"],
                    ["–î–æ–±–∞–≤–ª–µ–Ω emoji üíÜ –¥–ª—è –º–∞—Å—Å–∞–∂–∞"]
                )
            
            return self._create_fix_result(False, "Emoji –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
            
        except Exception as e:
            return self._create_fix_result(False, f"–û—à–∏–±–∫–∞: {e}")
    
    def _fix_formatting(self, bug_analysis: Dict) -> Dict:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–æ–≤, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç.–¥.
            
            return self._create_fix_result(False, "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            
        except Exception as e:
            return self._create_fix_result(False, f"–û—à–∏–±–∫–∞: {e}")
    
    def _fix_links(self, bug_analysis: Dict) -> Dict:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
            
            return self._create_fix_result(False, "–°—Å—ã–ª–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç")
            
        except Exception as e:
            return self._create_fix_result(False, f"–û—à–∏–±–∫–∞: {e}")
    
    def _fix_case_issues(self, bug_analysis: Dict) -> Dict:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–æ–º –±—É–∫–≤"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–ª–∞–≤–Ω—ã—Ö/—Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤
            
            return self._create_fix_result(False, "–†–µ–≥–∏—Å—Ç—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç")
            
        except Exception as e:
            return self._create_fix_result(False, f"–û—à–∏–±–∫–∞: {e}")
    
    def _create_fix_result(self, success: bool, description: str, 
                          modified_files: List[str] = None, 
                          changes: List[str] = None) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        return {
            'success': success,
            'description': description,
            'modified_files': modified_files or [],
            'changes_made': changes or [],
            'timestamp': datetime.now().isoformat(),
            'tests_passed': '–ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å'  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
        }
    
    def _log_fix_action(self, bug_analysis: Dict, fix_result: Dict):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'bug_id': bug_analysis.get('bug_id'),
            'fix_type': 'automatic',
            'success': fix_result['success'],
            'description': fix_result['description'],
            'modified_files': fix_result['modified_files'],
            'changes': fix_result['changes_made']
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∞–≤—Ç–æ—Ñ–∏–∫—Å–æ–≤
        log_file = 'data/auto_fixes.log'
        os.makedirs(os.path.dirname(log_file), exist_ok=True)
        
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
        
        logger.info(f"üìù –ê–≤—Ç–æ—Ñ–∏–∫—Å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω: {bug_analysis.get('bug_id')}")
    
    def is_safe_to_modify(self, file_path: str, content_change: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö
        if file_path not in self.safe_files:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in self.dangerous_patterns:
            if re.search(pattern, content_change, re.IGNORECASE):
                logger.warning(f"‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏: {pattern}")
                return False
        
        return True
    
    def get_fix_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        log_file = 'data/auto_fixes.log'
        
        if not os.path.exists(log_file):
            return {'total_fixes': 0, 'successful_fixes': 0, 'failed_fixes': 0}
        
        total = 0
        successful = 0
        failed = 0
        
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                for line in f:
                    if line.strip():
                        entry = json.loads(line)
                        total += 1
                        if entry.get('success'):
                            successful += 1
                        else:
                            failed += 1
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ—Ñ–∏–∫—Å–æ–≤: {e}")
        
        return {
            'total_fixes': total,
            'successful_fixes': successful,
            'failed_fixes': failed,
            'success_rate': round(successful / total * 100, 1) if total > 0 else 0
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auto_fixer = AutoFixer()