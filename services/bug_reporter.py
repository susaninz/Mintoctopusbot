#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–≥–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Optional
import logging
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π circular imports)
try:
    from services.gpt_bug_analyzer import gpt_bug_analyzer
    from services.telegram_notifier import telegram_notifier
    from services.auto_fixer import auto_fixer
    from services.bug_tracker import bug_tracker
except ImportError as e:
    logging.warning(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

logger = logging.getLogger(__name__)

class BugReporter:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–±–æ—Ä–æ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º –±–∞–≥–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    
    def __init__(self, reports_file: str = "data/bug_reports.json"):
        self.reports_file = reports_file
        self.ensure_reports_file()
    
    def ensure_reports_file(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
        if not os.path.exists(self.reports_file):
            os.makedirs(os.path.dirname(self.reports_file), exist_ok=True)
            with open(self.reports_file, 'w', encoding='utf-8') as f:
                json.dump({"reports": []}, f, ensure_ascii=False, indent=2)
    
    async def handle_bug_report_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–≥–µ."""
        keyboard = [
            [InlineKeyboardButton("üêõ –ß—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="bug_problem")],
            [InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="bug_suggestion")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="bug_cancel")]
        ]
        
        await update.message.reply_text(
            "üêõ **–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ**\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—à—å —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞! –í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
            "üêõ **–ß—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç** - –æ—à–∏–±–∫–∞, –±–∞–≥, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ\n"
            "üí° **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ** - –∏–¥–µ—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–ª–∏ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è\n\n"
            "–¢–≤–æ–π –æ—Ç—á–µ—Ç –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É!",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def handle_bug_type_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, bug_type: str) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –±–∞–≥–∞."""
        query = update.callback_query
        await query.answer()
        
        user_id = str(update.effective_user.id)
        context.user_data['bug_report'] = {
            'type': bug_type,
            'user_id': user_id,
            'username': update.effective_user.username,
            'first_name': update.effective_user.first_name,
            'started_at': datetime.now().isoformat()
        }
        
        type_names = {
            'problem': 'üêõ –ü—Ä–æ–±–ª–µ–º–∞',
            'suggestion': 'üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
        }
        
        if bug_type == 'problem':
            instruction_text = (
                f"üìù **{type_names.get(bug_type, '–û—Ç—á–µ—Ç')}**\n\n"
                "–û–ø–∏—à–∏ —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥—Ä–æ–±–Ω–æ:\n\n"
                "üéØ **–ß–¢–û –¢–´ –î–ï–õ–ê–õ:**\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤—ã–±–∏—Ä–∞–ª —Å–ª–æ—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —É –ú–∞—à–∏)\n\n"
                "‚ùå **–ß–¢–û –ü–û–®–õ–û –ù–ï –¢–ê–ö:**\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –±–æ—Ç –ø–æ–∫–∞–∑–∞–ª –æ—à–∏–±–∫—É –∏–ª–∏ –∑–∞–≤–∏—Å–∞–µ—Ç)\n\n"
                "‚úÖ **–ß–¢–û –û–ñ–ò–î–ê–õ:**\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã)\n\n"
                "üïê **–ö–û–ì–î–ê:**\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–µ–≥–æ–¥–Ω—è –≤ 15:30)\n\n"
                "üí° **–ï—Å–ª–∏ –º–æ–∂–µ—à—å - –ø—Ä–∏–ª–æ–∂–∏ –°–ö–†–ò–ù–®–û–¢ —ç–∫—Ä–∞–Ω–∞!**\n"
                "–ù–∞–ø–∏—à–∏ –≤—Å–µ –ø–æ–¥—Ä—è–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ ‚¨áÔ∏è"
            )
        else:  # suggestion
            instruction_text = (
                f"üìù **{type_names.get(bug_type, '–û—Ç—á–µ—Ç')}**\n\n"
                "–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π –∏–¥–µ–µ–π:\n\n"
                "üí° **–ß–¢–û –ü–†–ï–î–õ–ê–ì–ê–ï–®–¨:**\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ —á–∞—Å –¥–æ —Å–µ–∞–Ω—Å–∞)\n\n"
                "üéØ **–ó–ê–ß–ï–ú –≠–¢–û –ù–£–ñ–ù–û:**\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –∑–∞–ø–∏—Å–∏)\n\n"
                "üîß **–ö–ê–ö –í–ò–î–ò–®–¨ –†–ï–ê–õ–ò–ó–ê–¶–ò–Æ:**\n"
                "(–µ—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏ –∫–∞–∫ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å)\n\n"
                "–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚¨áÔ∏è"
            )
        
        await query.edit_message_text(
            instruction_text,
            parse_mode='Markdown'
        )
    
    async def handle_bug_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if 'bug_report' not in context.user_data:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–≥–µ –∫–æ–º–∞–Ω–¥–æ–π /bug")
            return
        
        description = update.message.text
        bug_report = context.user_data['bug_report']
        bug_report['description'] = description
        bug_report['completed_at'] = datetime.now().isoformat()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ç—á–µ—Ç–∞
        report_id = f"BR_{int(datetime.now().timestamp())}"
        bug_report['report_id'] = report_id
        bug_report['id'] = report_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        await self._save_bug_report(bug_report)
        
        # –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–≥–∞
        await self._process_enhanced_bug_report(bug_report)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [
            [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –æ—Ç—á–µ—Ç—ã", callback_data="bug_my_reports")]
        ]
        
        await update.message.reply_text(
            f"‚úÖ **–û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω!**\n\n"
            f"üÜî –ù–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞: `{report_id}`\n"
            f"üìù –¢–∏–ø: {self._get_type_emoji(bug_report['type'])}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ë–∞–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.\n"
            "–ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–≥, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n"
            "–¢—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –±–∞–≥ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del context.user_data['bug_report']
    
    async def _save_bug_report(self, report: Dict) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ –±–∞–≥–µ –≤ —Ñ–∞–π–ª."""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç—á–µ—Ç—ã
            with open(self.reports_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
            data['reports'].append(report)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(self.reports_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç—á–µ—Ç –æ –±–∞–≥–µ: {report['report_id']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–∞–≥–µ: {e}")
    
    async def _log_bug_for_admin(self, report: Dict) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –±–∞–≥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        priority = "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô" if report['type'] == 'critical' else "üì¢ –ù–û–í–´–ô"
        
        logger.warning(f"{priority} –ë–ê–ì –†–ï–ü–û–†–¢:")
        logger.warning(f"  ID: {report['report_id']}")
        logger.warning(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {report.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (@{report.get('username', '–Ω–µ—Ç')})")
        logger.warning(f"  –¢–∏–ø: {report['type']}")
        logger.warning(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {report['description'][:200]}...")
    
    def _get_type_emoji(self, bug_type: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –±–∞–≥–∞."""
        emojis = {
            'problem': 'üêõ –ü—Ä–æ–±–ª–µ–º–∞',
            'suggestion': 'üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
        }
        return emojis.get(bug_type, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    def get_recent_reports(self, hours: int = 24) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤."""
        try:
            with open(self.reports_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            cutoff_time = datetime.now().timestamp() - (hours * 3600)
            recent_reports = []
            
            for report in data.get('reports', []):
                try:
                    report_time = datetime.fromisoformat(report['completed_at']).timestamp()
                    if report_time > cutoff_time:
                        recent_reports.append(report)
                except:
                    continue
            
            return recent_reports
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
            return []
    
    def get_critical_reports(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã."""
        try:
            with open(self.reports_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            critical_reports = [
                report for report in data.get('reports', [])
                if report.get('type') == 'critical' and report.get('status', 'open') == 'open'
            ]
            
            return critical_reports
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
            return []
    
    async def mark_report_resolved(self, report_id: str, resolution: str) -> bool:
        """–ü–æ–º–µ—á–∞–µ—Ç –æ—Ç—á–µ—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π."""
        try:
            with open(self.reports_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            for report in data.get('reports', []):
                if report.get('report_id') == report_id:
                    report['status'] = 'resolved'
                    report['resolved_at'] = datetime.now().isoformat()
                    report['resolution'] = resolution
                    
                    with open(self.reports_file, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                    
                    logger.info(f"‚úÖ –û—Ç—á–µ—Ç {report_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π")
                    return True
            
            logger.warning(f"‚ö†Ô∏è –û—Ç—á–µ—Ç {report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    async def _process_enhanced_bug_report(self, bug_report: Dict) -> None:
        """–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–≥–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞–≥–∞ {bug_report['id']}")
            
            # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–≥ —á–µ—Ä–µ–∑ GPT
            try:
                bug_analysis = gpt_bug_analyzer.analyze_bug(bug_report)
                logger.info(f"üß† GPT –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {bug_report['id']}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞: {e}")
                bug_analysis = self._create_fallback_analysis(bug_report)
            
            # 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Ç—Ä–µ–∫–µ—Ä–µ
            try:
                bug_tracker.register_bug(bug_report, bug_analysis)
                logger.info(f"üìã –ë–∞–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ç—Ä–µ–∫–µ—Ä–µ: {bug_report['id']}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ç—Ä–µ–∫–µ—Ä–µ: {e}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞
            try:
                if auto_fixer.can_auto_fix(bug_analysis):
                    logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ—Ñ–∏–∫—Å –¥–ª—è {bug_report['id']}")
                    
                    fix_result = auto_fixer.auto_fix_bug(bug_analysis)
                    
                    if fix_result['success']:
                        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                        bug_tracker.log_fix_attempt(bug_report['id'], fix_result, success=True)
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –∞–≤—Ç–æ—Ñ–∏–∫—Å–µ
                        telegram_notifier.send_auto_fix_notification(bug_report['id'], fix_result)
                        
                        logger.info(f"‚úÖ –ê–≤—Ç–æ—Ñ–∏–∫—Å —É—Å–ø–µ—à–µ–Ω –¥–ª—è {bug_report['id']}")
                    else:
                        logger.info(f"‚ùå –ê–≤—Ç–æ—Ñ–∏–∫—Å –Ω–µ—É–¥–∞—á–µ–Ω –¥–ª—è {bug_report['id']}: {fix_result['description']}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        bug_analysis['original_description'] = bug_report['description']
                        bug_analysis['reporter'] = f"@{bug_report.get('username', 'unknown')}"
                        telegram_notifier.add_to_pending(bug_analysis)
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    bug_analysis['original_description'] = bug_report['description']
                    bug_analysis['reporter'] = f"@{bug_report.get('username', 'unknown')}"
                    telegram_notifier.add_to_pending(bug_analysis)
                    
                    logger.info(f"üìù –ë–∞–≥ {bug_report['id']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞: {e}")
                
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                bug_analysis['original_description'] = bug_report['description']
                bug_analysis['reporter'] = f"@{bug_report.get('username', 'unknown')}"
                telegram_notifier.add_to_pending(bug_analysis)
            
            logger.info(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–≥–∞ {bug_report['id']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–≥–∞ {bug_report.get('id', 'unknown')}: {e}")
    
    def _create_fallback_analysis(self, bug_report: Dict) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ GPT"""
        # –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã (–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å—á–∏—Ç–∞–µ–º —Å–µ—Ä—å–µ–∑–Ω—ã–º–∏
        severity = 'high' if bug_report.get('type') == 'problem' else 'normal'
        
        return {
            'bug_id': bug_report['id'],
            'analyzed_at': datetime.now().isoformat(),
            'bug_type': 'unknown',
            'severity': severity,
            'analysis': 'GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑.',
            'cursor_prompt': f'–ò—Å—Å–ª–µ–¥—É–π –ø—Ä–æ–±–ª–µ–º—É: {bug_report.get("description", "")}',
            'auto_fixable': False,
            'estimated_complexity': 'unknown',
            'affected_files': ['working_bot.py'],
            'test_scenarios': ['–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É']
        }
    
    def get_enhanced_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–≥–∞–º"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            basic_stats = {
                'total_reports': 0,
                'critical_reports': 0,
                'recent_reports_24h': 0
            }
            
            try:
                recent_reports = self.get_recent_reports(24)
                critical_reports = self.get_critical_reports()
                
                with open(self.reports_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                basic_stats.update({
                    'total_reports': len(data.get('reports', [])),
                    'critical_reports': len(critical_reports),
                    'recent_reports_24h': len(recent_reports)
                })
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞
            try:
                tracker_stats = bug_tracker.get_statistics()
                basic_stats.update(tracker_stats)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–∫–µ—Ä–∞: {e}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ñ–∏–∫—Å–æ–≤
            try:
                autofix_stats = auto_fixer.get_fix_statistics()
                basic_stats.update({
                    'auto_fixes_total': autofix_stats.get('total_fixes', 0),
                    'auto_fixes_successful': autofix_stats.get('successful_fixes', 0),
                    'auto_fix_success_rate': autofix_stats.get('success_rate', 0)
                })
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ—Ñ–∏–∫—Å–æ–≤: {e}")
            
            return basic_stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞
bug_reporter = BugReporter()