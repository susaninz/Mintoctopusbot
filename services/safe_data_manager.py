#!/usr/bin/env python3
"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
import logging
from .backup_manager import backup_manager

logger = logging.getLogger(__name__)

class SafeDataManager:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    
    def __init__(self, data_file: str = "data/database.json"):
        self.data_file = data_file
        self.data = None
        self._load_data_safely()
    
    def _load_data_safely(self) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            integrity_check = backup_manager.verify_data_integrity(self.data_file)
            
            if not integrity_check['valid']:
                logger.error(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {integrity_check['error']}")
                self._restore_from_latest_backup()
                return
            
            if not integrity_check['has_critical_data']:
                logger.warning("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—ç–∫–∞–ø—ã...")
                self._restore_from_latest_backup()
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(self.data_file, 'r', encoding='utf-8') as f:
                self.data = json.load(f)
            
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {integrity_check['stats']}")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self._restore_from_latest_backup()
    
    def _restore_from_latest_backup(self) -> None:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞."""
        logger.warning("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        
        backups = backup_manager.list_backups()
        
        for backup in backups:
            integrity_check = backup_manager.verify_data_integrity(backup['filepath'])
            
            if integrity_check['valid'] and integrity_check['has_critical_data']:
                logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –±—ç–∫–∞–ø: {backup['filename']}")
                
                if backup_manager.restore_from_backup(backup['filepath']):
                    with open(self.data_file, 'r', encoding='utf-8') as f:
                        self.data = json.load(f)
                    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                    return
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
        self._create_empty_structure()
    
    def _create_empty_structure(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö."""
        self.data = {
            "masters": [],
            "bookings": [],
            "device_bookings": [],
            "devices": [],
            "locations": [
                {"name": "–ë–∞–Ω—è", "is_open": True},
                {"name": "–°–ø–∞—Å–∞–ª–∫–∞", "is_open": True},
                {"name": "–ì–ª—ç–º–ø–∏–Ω–≥", "is_open": False}
            ],
            "settings": {
                "max_bookings_per_master": 2,
                "reminder_hours": 1
            },
            "metadata": {
                "created_at": datetime.now().isoformat(),
                "last_backup": None,
                "version": "1.0"
            }
        }
        self.save_data("emergency_recreate")
        logger.warning("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    def save_data(self, reason: str = "update") -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏."""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            if self.data and reason != "emergency_recreate":
                backup_path = backup_manager.create_timestamped_backup(f"before_{reason}")
                if backup_path:
                    logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º: {backup_path}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if not self.data:
                logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return False
            
            self.data.setdefault("metadata", {})
            self.data["metadata"]["last_updated"] = datetime.now().isoformat()
            self.data["metadata"]["update_reason"] = reason
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            integrity_check = backup_manager.verify_data_integrity(self.data_file)
            if not integrity_check['valid']:
                logger.error(f"‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {integrity_check['error']}")
                return False
            
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (–ø—Ä–∏—á–∏–Ω–∞: {reason})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def get_data(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ."""
        if self.data is None:
            self._load_data_safely()
        return self.data
    
    def add_master(self, master_data: Dict) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Å—Ç–µ—Ä–∞."""
        try:
            if not self.data:
                self._load_data_safely()
            
            self.data.setdefault("masters", []).append(master_data)
            return self.save_data("add_master")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
            return False
    
    def add_booking(self, booking_data: Dict) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å."""
        try:
            if not self.data:
                self._load_data_safely()
            
            self.data.setdefault("bookings", []).append(booking_data)
            return self.save_data("add_booking")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            return False
    
    def add_device_booking(self, device_booking_data: Dict) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
        try:
            if not self.data:
                self._load_data_safely()
            
            self.data.setdefault("device_bookings", []).append(device_booking_data)
            return self.save_data("add_device_booking")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {e}")
            return False
    
    def update_master(self, telegram_id: str, update_data: Dict) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞."""
        try:
            if not self.data:
                self._load_data_safely()
            
            masters = self.data.get("masters", [])
            for master in masters:
                if master.get("telegram_id") == telegram_id:
                    master.update(update_data)
                    return self.save_data("update_master")
            
            logger.warning(f"‚ö†Ô∏è –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {telegram_id}")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
            return False
    
    def get_health_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            integrity_check = backup_manager.verify_data_integrity(self.data_file)
            backups = backup_manager.list_backups()
            recent_backups = [b for b in backups if b['age_hours'] < 24]
            
            return {
                'database_valid': integrity_check['valid'],
                'has_critical_data': integrity_check.get('has_critical_data', False),
                'file_size': integrity_check['stats'].get('file_size', 0),
                'total_backups': len(backups),
                'recent_backups': len(recent_backups),
                'last_backup_age_hours': min([b['age_hours'] for b in backups]) if backups else None,
                'data_stats': integrity_check['stats'],
                'last_updated': self.data.get('metadata', {}).get('last_updated') if self.data else None
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return {'error': str(e)}
    
    def create_manual_backup(self, reason: str = "manual") -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä—É—á–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é."""
        return backup_manager.create_timestamped_backup(reason)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
safe_data_manager = SafeDataManager()