"""
Telegram Notifier - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–≥–∞—Ö —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
"""

import asyncio
import logging
from typing import Dict, List, Optional
from datetime import datetime
import json
import os
from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.error import TelegramError

logger = logging.getLogger(__name__)

class TelegramNotifier:
    def __init__(self, admin_id: int = 78273571):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
        self.bot_token = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN")
        self.admin_id = admin_id
        self.bot = Bot(token=self.bot_token) if self.bot_token else None
        self.pending_notifications = []
        
        if not self.bot:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è TelegramNotifier")
    
    async def send_critical_bug_notification(self, bug_analysis: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –±–∞–≥–µ"""
        if not self.bot:
            logger.error("‚ùå Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            message = self._format_critical_bug_message(bug_analysis)
            keyboard = self._create_bug_action_keyboard(bug_analysis['bug_id'])
            
            await self.bot.send_message(
                chat_id=self.admin_id,
                text=message,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            logger.info(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –±–∞–≥–∞ {bug_analysis['bug_id']}")
            return True
            
        except TelegramError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_daily_bug_digest(self, bug_analyses: List[Dict]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ–±—ã—á–Ω—ã—Ö –±–∞–≥–æ–≤"""
        if not self.bot or not bug_analyses:
            return False
            
        try:
            message = self._format_digest_message(bug_analyses)
            keyboard = self._create_digest_keyboard(bug_analyses)
            
            await self.bot.send_message(
                chat_id=self.admin_id,
                text=message,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            logger.info(f"‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {len(bug_analyses)} –±–∞–≥–æ–≤")
            return True
            
        except TelegramError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: {e}")
            return False
    
    async def send_auto_fix_notification(self, bug_id: str, fix_details: Dict) -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        if not self.bot:
            return False
            
        try:
            message = self._format_auto_fix_message(bug_id, fix_details)
            
            await self.bot.send_message(
                chat_id=self.admin_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ—Ñ–∏–∫—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {bug_id}")
            return True
            
        except TelegramError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ—Ñ–∏–∫—Å–µ: {e}")
            return False
    
    def _format_critical_bug_message(self, bug_analysis: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –±–∞–≥–µ"""
        bug_id = bug_analysis.get('bug_id', 'Unknown')
        severity = bug_analysis.get('severity', 'normal').upper()
        bug_type = bug_analysis.get('bug_type', 'unknown')
        
        # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        severity_emoji = {
            'CRITICAL': 'üî¥',
            'HIGH': 'üü°', 
            'NORMAL': 'üü¢'
        }.get(severity, '‚ö™')
        
        message = f"""
{severity_emoji} <b>–ë–ê–ì–†–ï–ü–û–†–¢ #{bug_id}</b> | {severity}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {bug_analysis.get('reporter', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}
üìù <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {bug_analysis.get('original_description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}

üîç <b>GPT –ê–ù–ê–õ–ò–ó:</b>
{bug_analysis.get('analysis', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}

üíª <b>–ü–†–û–ú–ü–¢ –î–õ–Ø CURSOR:</b>
<code>{bug_analysis.get('cursor_prompt', '–ü—Ä–æ–º–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}</code>

üìä <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –¢–∏–ø: {bug_type}
‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {bug_analysis.get('estimated_complexity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –§–∞–π–ª—ã: {', '.join(bug_analysis.get('affected_files', []))}

‚è∞ –ê–Ω–∞–ª–∏–∑: {bug_analysis.get('analyzed_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        """.strip()
        
        return message
    
    def _format_digest_message(self, bug_analyses: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –±–∞–≥–æ–≤"""
        total_bugs = len(bug_analyses)
        critical_count = len([b for b in bug_analyses if b.get('severity') == 'critical'])
        high_count = len([b for b in bug_analyses if b.get('severity') == 'high'])
        normal_count = total_bugs - critical_count - high_count
        
        message = f"""
üìã <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –î–ê–ô–î–ñ–ï–°–¢ –ë–ê–ì–û–í</b>

üìä <b>–í—Å–µ–≥–æ: {total_bugs}</b>
üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {critical_count}
üü° –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {high_count} 
üü¢ –û–±—ã—á–Ω—ã—Ö: {normal_count}

<b>–°–ü–ò–°–û–ö –ë–ê–ì–û–í:</b>
        """
        
        for i, bug in enumerate(bug_analyses[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5
            severity_emoji = {
                'critical': 'üî¥',
                'high': 'üü°',
                'normal': 'üü¢'
            }.get(bug.get('severity', 'normal'), '‚ö™')
            
            message += f"\n{i}. {severity_emoji} #{bug.get('bug_id', 'N/A')} - {bug.get('original_description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')[:50]}..."
        
        if total_bugs > 5:
            message += f"\n... –∏ –µ—â–µ {total_bugs - 5} –±–∞–≥–æ–≤"
            
        message += f"\n\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        
        return message
    
    def _format_auto_fix_message(self, bug_id: str, fix_details: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ—Ñ–∏–∫—Å–µ"""
        return f"""
ü§ñ <b>–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï</b>

üìã <b>–ë–∞–≥:</b> #{bug_id}
‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> {fix_details.get('status', '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω')}

üîß <b>–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:</b>
{fix_details.get('description', '–î–µ—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')}

üìÑ <b>–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>
{', '.join(fix_details.get('modified_files', []))}

üß™ <b>–¢–µ—Å—Ç—ã:</b> {fix_details.get('tests_passed', '–ù–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å')}

‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}
        """.strip()
    
    def _create_bug_action_keyboard(self, bug_id: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –±–∞–≥–æ–º"""
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"bug_fix_{bug_id}"),
                InlineKeyboardButton("‚ÑπÔ∏è –ù—É–∂–Ω–æ –∏–Ω—Ñ–æ", callback_data=f"bug_info_{bug_id}")
            ],
            [
                InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"bug_postpone_{bug_id}"),
                InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"bug_details_{bug_id}")
            ],
            [
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"bug_reject_{bug_id}")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def _create_digest_keyboard(self, bug_analyses: List[Dict]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ", callback_data="bugs_fix_all"),
                InlineKeyboardButton("üîç –î–µ—Ç–∞–ª–∏", callback_data="bugs_show_details")
            ],
            [
                InlineKeyboardButton("üü° –¢–æ–ª—å–∫–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ", callback_data="bugs_priority_only"),
                InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –≤—Å–µ", callback_data="bugs_postpone_all")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def handle_bug_action_callback(self, callback_data: str, user_id: int) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –æ –±–∞–≥–∞—Ö"""
        if user_id != self.admin_id:
            return {"success": False, "message": "Unauthorized"}
        
        try:
            action_parts = callback_data.split("_", 2)
            if len(action_parts) < 3:
                return {"success": False, "message": "Invalid callback format"}
            
            action_type = action_parts[1]  # fix, info, postpone, etc.
            bug_id = action_parts[2]
            
            response_message = ""
            
            if action_type == "fix":
                response_message = f"‚úÖ –ë–∞–≥ #{bug_id} –æ—Ç–º–µ—á–µ–Ω –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                
            elif action_type == "info":
                response_message = f"‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –±–∞–≥—É #{bug_id}"
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
            elif action_type == "postpone":
                response_message = f"‚è∞ –ë–∞–≥ #{bug_id} –æ—Ç–ª–æ–∂–µ–Ω"
                
            elif action_type == "details":
                response_message = f"üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–∞–≥—É #{bug_id}"
                # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                
            elif action_type == "reject":
                response_message = f"‚ùå –ë–∞–≥ #{bug_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            logger.info(f"üéØ –ê–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–µ: {action_type} –¥–ª—è –±–∞–≥–∞ {bug_id}")
            
            return {
                "success": True,
                "action": action_type,
                "bug_id": bug_id,
                "message": response_message
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            return {"success": False, "message": f"Error: {e}"}
    
    def add_to_pending(self, bug_analysis: Dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–≥ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        if bug_analysis.get('severity') == 'critical':
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
            asyncio.create_task(self.send_critical_bug_notification(bug_analysis))
        else:
            # –û–±—ã—á–Ω—ã–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.pending_notifications.append(bug_analysis)
            logger.info(f"üìã –ë–∞–≥ {bug_analysis.get('bug_id')} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –¥–∞–π–¥–∂–µ—Å—Ç–∞")
    
    async def send_pending_digest(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if self.pending_notifications:
            await self.send_daily_bug_digest(self.pending_notifications)
            self.pending_notifications.clear()
    
    def get_pending_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–≥–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        return len(self.pending_notifications)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_notifier = TelegramNotifier()