"""
GPT Bug Analyzer - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–≥—Ä–µ–ø–æ—Ä—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è Cursor
"""

import openai
import logging
from typing import Dict, List, Optional
from datetime import datetime
import json
import os

logger = logging.getLogger(__name__)

class GPTBugAnalyzer:
    def __init__(self):
        self.openai_client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.codebase_context = self._load_codebase_context()
        
    def _load_codebase_context(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–¥–±–µ–π–∑–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        context = """
        –ö–û–ù–¢–ï–ö–°–¢ –ö–û–î–ë–ï–ô–ó–ê MINTOCTOPUS BOT:
        
        –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:
        - working_bot.py: –≥–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback
        - services/data_manager.py: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JSON –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        - services/gpt_service.py: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GPT –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞
        - services/bug_reporter.py: —Å–∏—Å—Ç–µ–º–∞ –±–∞–≥—Ä–µ–ø–æ—Ä—Ç–æ–≤
        - data/database.json: JSON –±–∞–∑–∞ —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏, –∑–∞–ø–∏—Å—è–º–∏
        
        –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
        - handle_callback_query: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
        - show_device_details: –ø–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        - process_device_booking: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        - show_slots_with_management: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏ –º–∞—Å—Ç–µ—Ä–æ–≤
        
        –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
        - –ü–∞—Ä—Å–∏–Ω–≥ callback_data —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ (device_id)
        - Async/await issues –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        - –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞ –≤ —Å–ª–æ—Ç–∞—Ö (past/future filtering)
        - GPT —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–π
        - Healthcheck –∏ webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        """
        return context
        
    def analyze_bug(self, bug_report: Dict) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–≥—Ä–µ–ø–æ—Ä—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        """
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–∞–≥ ID: {bug_report.get('id', 'unknown')}")
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–∏–ø –±–∞–≥–∞
            bug_type = self._classify_bug_type(bug_report)
            severity = self._determine_severity(bug_report)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT
            analysis = self._generate_gpt_analysis(bug_report, bug_type)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Cursor
            cursor_prompt = self._generate_cursor_prompt(bug_report, analysis)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞
            auto_fixable = self._is_auto_fixable(bug_report, analysis)
            
            result = {
                "bug_id": bug_report.get('id'),
                "analyzed_at": datetime.now().isoformat(),
                "bug_type": bug_type,
                "severity": severity,
                "analysis": analysis,
                "cursor_prompt": cursor_prompt,
                "auto_fixable": auto_fixable,
                "estimated_complexity": self._estimate_complexity(analysis),
                "affected_files": self._identify_affected_files(analysis),
                "test_scenarios": self._suggest_test_scenarios(bug_report)
            }
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–∏–ø: {bug_type}, –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {severity}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–≥–∞: {e}")
            return self._create_fallback_analysis(bug_report)
    
    def _classify_bug_type(self, bug_report: Dict) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø –±–∞–≥–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"""
        description = bug_report.get('description', '').lower()
        
        if any(word in description for word in ['–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç', '–∑–∞–≤–∏—Å–∞–µ—Ç']):
            return "functionality_failure"
        elif any(word in description for word in ['–æ—à–∏–±–∫–∞', 'error', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ']):
            return "error_message"
        elif any(word in description for word in ['–º–µ–¥–ª–µ–Ω–Ω–æ', '–¥–æ–ª–≥–æ', '—Ç–æ—Ä–º–æ–∑–∏—Ç']):
            return "performance"
        elif any(word in description for word in ['–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', '–Ω–µ —Ç–æ']):
            return "incorrect_behavior"
        elif any(word in description for word in ['–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç', '–ø—Ä–æ–ø–∞–ª', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç']):
            return "missing_data"
        else:
            return "other"
    
    def _determine_severity(self, bug_report: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –±–∞–≥–∞"""
        report_type = bug_report.get('type', '')
        description = bug_report.get('description', '').lower()
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if report_type == 'suggestion':
            return "normal"
        
        # –î–ª—è –ø—Ä–æ–±–ª–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        critical_keywords = ['–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è', '–∫—Ä–∞—à–∏—Ç—Å—è', '–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç', '–æ—à–∏–±–∫–∞', '–∑–∞–≤–∏—Å–∞–µ—Ç']
        if any(word in description for word in critical_keywords):
            return "critical"
        
        # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if any(word in description for word in ['–∑–∞–ø–∏—Å—å', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Å–ª–æ—Ç—ã', '–º–∞—Å—Ç–µ—Ä']):
            return "high"
        else:
            return "normal"
    
    def _generate_gpt_analysis(self, bug_report: Dict, bug_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT"""
        try:
            prompt = f"""
            –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ç–ª–∞–¥–∫–µ Telegram –±–æ—Ç–æ–≤ –Ω–∞ Python. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–∞–≥—Ä–µ–ø–æ—Ä—Ç:
            
            –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´: {bug_report.get('description', '')}
            –¢–ò–ü –ë–ê–ì–ê: {bug_type}
            –®–ê–ì–ò –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø: {bug_report.get('steps_to_reproduce', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}
            
            –ö–û–ù–¢–ï–ö–°–¢ –ö–û–î–ë–ï–ô–ó–ê:
            {self.codebase_context}
            
            –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
            1. –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–±–ª–µ–º—ã
            2. –í –∫–∞–∫–æ–º —Ñ–∞–π–ª–µ/—Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–∫–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É
            3. –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ç–∞–∫
            4. –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
            
            –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, —Ñ–æ–∫—É—Å–∏—Ä—É—è—Å—å –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª—è—Ö.
            """
            
            response = self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                max_tokens=500
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return f"GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑: {bug_type}"
    
    def _generate_cursor_prompt(self, bug_report: Dict, analysis: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Cursor IDE"""
        cursor_prompt = f"""
        üêõ –ë–ê–ì–§–ò–ö–° –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø CURSOR

        üìã –ü–†–û–ë–õ–ï–ú–ê:
        {bug_report.get('description', '')}
        
        üîç GPT –ê–ù–ê–õ–ò–ó:
        {analysis}
        
        üíª –ß–¢–û –î–ï–õ–ê–¢–¨ –í CURSOR:
        1. –û—Ç–∫—Ä–æ–π —Ñ–∞–π–ª —Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π
        2. –ù–∞–π–¥–∏ —Ñ—É–Ω–∫—Ü–∏—é/—Ä–∞–∑–¥–µ–ª, —É–ø–æ–º—è–Ω—É—Ç—ã–π –≤ –∞–Ω–∞–ª–∏–∑–µ
        3. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        4. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ async/await –∏ error handling
        5. –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä—Å–∏–Ω–≥ callback_data –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        
        üéØ –§–û–ö–£–° –ù–ê:
        - –û–±—Ä–∞–±–æ—Ç–∫–∞ edge cases
        - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É—Å–ª–æ–≤–∏–π if/else
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        
        ‚úÖ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–í–ï–†–¨:
        - –¢–æ—Ç –∂–µ —Å—Ü–µ–Ω–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –±–∞–≥
        - –ü–æ—Ö–æ–∂–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        - –õ–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫
        """
        
        return cursor_prompt
    
    def _is_auto_fixable(self, bug_report: Dict, analysis: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥"""
        description = bug_report.get('description', '').lower()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞ –ø—Ä–æ–±–ª–µ–º—ã
        safe_fixes = [
            '–æ–ø–µ—á–∞—Ç–∫–∞', 'typo', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç',
            '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', '—É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Å—ã–ª–∫–∞',
            '—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤',
            '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç emoji', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π emoji'
        ]
        
        return any(fix in description for fix in safe_fixes)
    
    def _estimate_complexity(self, analysis: str) -> str:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        analysis_lower = analysis.lower()
        
        if any(word in analysis_lower for word in ['–ø—Ä–æ—Å—Ç–∞—è', '–æ–ø–µ—á–∞—Ç–∫–∞', '—Ç–µ–∫—Å—Ç']):
            return "low"
        elif any(word in analysis_lower for word in ['–ª–æ–≥–∏–∫–∞', '—É—Å–ª–æ–≤–∏–µ', '–ø–∞—Ä—Å–∏–Ω–≥']):
            return "medium"
        elif any(word in analysis_lower for word in ['–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö']):
            return "high"
        else:
            return "medium"
    
    def _identify_affected_files(self, analysis: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
        files = []
        common_files = [
            'working_bot.py', 'data_manager.py', 'gpt_service.py',
            'bug_reporter.py', 'database.json'
        ]
        
        for file in common_files:
            if file in analysis:
                files.append(file)
        
        return files if files else ['working_bot.py']  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
    
    def _suggest_test_scenarios(self, bug_report: Dict) -> List[str]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        scenarios = [
            "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–æ—á–Ω—ã–µ —à–∞–≥–∏ –∏–∑ –±–∞–≥—Ä–µ–ø–æ—Ä—Ç–∞",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å edge cases"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –±–∞–≥–∞
        description = bug_report.get('description', '').lower()
        if '–∫–Ω–æ–ø–∫' in description:
            scenarios.append("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ç–æ–º –∂–µ —Ä–∞–∑–¥–µ–ª–µ")
        if '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' in description:
            scenarios.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        if '—Å–ª–æ—Ç' in description:
            scenarios.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –¥–∞—Ç—ã")
            
        return scenarios
    
    def _create_fallback_analysis(self, bug_report: Dict) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏"""
        return {
            "bug_id": bug_report.get('id'),
            "analyzed_at": datetime.now().isoformat(),
            "bug_type": "unknown",
            "severity": "normal",
            "analysis": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑.",
            "cursor_prompt": f"–ò—Å—Å–ª–µ–¥—É–π –ø—Ä–æ–±–ª–µ–º—É: {bug_report.get('description', '')}",
            "auto_fixable": False,
            "estimated_complexity": "unknown",
            "affected_files": ["working_bot.py"],
            "test_scenarios": ["–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É"]
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
gpt_bug_analyzer = GPTBugAnalyzer()