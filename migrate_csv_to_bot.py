#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ç–∞–±–ª–∏—Ü –≤ –±–æ—Ç–∞.
–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ CSV —Ñ–∞–π–ª–æ–≤.
"""

import json
import csv
import uuid
from datetime import datetime
from collections import defaultdict

def load_database():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞."""
    with open('data/database.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def save_database(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞."""
    with open('data/database.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def normalize_date(date_str):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY –≤ YYYY-MM-DD."""
    try:
        if '.' in date_str:
            parts = date_str.split('.')
            if len(parts) == 3:
                day, month, year = parts
                if len(year) == 2:
                    year = '20' + year
                return f"{year}-{month.zfill(2)}-{day.zfill(2)}"
    except:
        pass
    return None

def normalize_time(time_str):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤ HH:MM."""
    if not time_str:
        return None
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    time_str = time_str.strip()
    
    # –ó–∞–º–µ–Ω—è–µ–º –¥–µ—Ñ–∏—Å—ã –Ω–∞ –¥–≤–æ–µ—Ç–æ—á–∏—è
    time_str = time_str.replace('-', ':')
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å –±–µ–∑ –º–∏–Ω—É—Ç, –¥–æ–±–∞–≤–ª—è–µ–º :00
    if ':' not in time_str and time_str.isdigit():
        time_str += ':00'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç HH:MM
    try:
        parts = time_str.split(':')
        if len(parts) == 2:
            hour, minute = parts
            return f"{hour.zfill(2)}:{minute.zfill(2)}"
    except:
        pass
    
    return time_str

def find_master_by_name(masters, master_name):
    """–ù–∞—Ö–æ–¥–∏—Ç –º–∞—Å—Ç–µ—Ä–∞ –≤ –±–∞–∑–µ –±–æ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏."""
    for master in masters:
        if master.get('name', '').lower() == master_name.lower():
            return master
    return None

def create_slot_for_master(master, slot_data):
    """–°–æ–∑–¥–∞—ë—Ç —Å–ª–æ—Ç –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."""
    return {
        'date': slot_data['date'],
        'start_time': slot_data['start_time'],
        'end_time': slot_data['end_time'],
        'location': slot_data['location'],
        'is_booked': False
    }

def create_booking_for_master(master, slot_data, client_data):
    """–°–æ–∑–¥–∞—ë—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."""
    booking_id = str(uuid.uuid4())
    
    return {
        'id': booking_id,
        'client_id': 'unknown',  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ —Å –±–æ—Ç–æ–º
        'client_name': client_data['display_name'],
        'client_username': client_data['username'],
        'master_id': master['telegram_id'],
        'master_name': master['name'],
        'slot_date': slot_data['date'],
        'slot_start_time': slot_data['start_time'],
        'slot_end_time': slot_data['end_time'],
        'location': slot_data['location'],
        'status': 'confirmed',
        'created_at': datetime.now().isoformat(),
        'migrated_from_csv': True
    }

def normalize_client_name(client_name):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç username."""
    if not client_name or client_name.strip() == '':
        return None
        
    client_name = client_name.strip()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏
    if client_name.lower() == 'acidrew':
        client_name = '@acidrew'
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º username –∏ display name
    if client_name.startswith('@'):
        return {
            'username': client_name,
            'display_name': client_name
        }
    else:
        return {
            'username': None,
            'display_name': client_name
        }

def main():
    print('üöÄ –ú–ò–ì–†–ê–¶–ò–Ø CSV –î–ê–ù–ù–´–• –í –ë–û–¢–ê')
    print('=' * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    data = load_database()
    masters = data.get('masters', [])
    
    print(f'üìä –ú–∞—Å—Ç–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(masters)}')
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
    print('üßπ –û—á–∏—â–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...')
    for master in masters:
        master['time_slots'] = []
        master['bookings'] = []
    
    # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª —Å–æ —Å–ª–æ—Ç–∞–º–∏
    bookings_data = []
    slots_data = defaultdict(list)  # master_name -> [slots]
    
    print('üìã –ß–∏—Ç–∞—é CSV —Ñ–∞–π–ª —Å–æ —Å–ª–æ—Ç–∞–º–∏...')
    
    with open("'25 –ú—è—Ç–Ω—ã–π –ó–∞–ø–æ–≤–µ–¥–Ω–∏–∫ - –°–ª–æ—Ç—ã.csv", 'r', encoding='utf-8') as f:
        reader = csv.reader(f)
        header = next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        
        for row_num, row in enumerate(reader, 2):
            if len(row) < 6:
                continue
                
            master_name = row[0].strip()
            date_str = row[1].strip()
            location = row[2].strip()
            start_time_str = row[3].strip()
            end_time_str = row[4].strip()
            client_name = row[5].strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not master_name or not date_str:
                continue
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É
            normalized_date = normalize_date(date_str)
            if not normalized_date:
                print(f'‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_num}: –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ "{date_str}"')
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().date().strftime('%Y-%m-%d')
            if normalized_date < today:
                print(f'‚è≠Ô∏è –°—Ç—Ä–æ–∫–∞ {row_num}: –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É {normalized_date}')
                continue
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è
            start_time = normalize_time(start_time_str)
            end_time = normalize_time(end_time_str)
            
            if not start_time or not end_time:
                print(f'‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_num}: –Ω–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è "{start_time_str}" - "{end_time_str}"')
                continue
            
            # –°–æ–∑–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç–∞
            slot_data = {
                'date': normalized_date,
                'start_time': start_time,
                'end_time': end_time,
                'location': location or '–ó–∞–ø–æ–≤–µ–¥–Ω–∏–∫'
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç –∫ –º–∞—Å—Ç–µ—Ä—É
            slots_data[master_name].append(slot_data)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç, —Å–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if client_name and client_name.strip():
                client_data = normalize_client_name(client_name)
                if client_data:
                    bookings_data.append({
                        'master_name': master_name,
                        'slot_data': slot_data,
                        'client_data': client_data
                    })
                    print(f'üìù –°—Ç—Ä–æ–∫–∞ {row_num}: {master_name} ‚Üí {client_data["display_name"]} ({normalized_date} {start_time})')
    
    print(f'\\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: {sum(len(slots) for slots in slots_data.values())}')
    print(f'üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(bookings_data)}')
    
    # –°–æ–∑–¥–∞—ë–º —Å–ª–æ—Ç—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
    print('\\nüéØ –°–æ–∑–¥–∞—é —Å–ª–æ—Ç—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤...')
    
    for master_name, slots in slots_data.items():
        master = find_master_by_name(masters, master_name)
        if not master:
            print(f'‚ùå –ú–∞—Å—Ç–µ—Ä "{master_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –±–æ—Ç–∞!')
            continue
        
        # –°–æ–∑–¥–∞—ë–º –≤—Å–µ —Å–ª–æ—Ç—ã (–≤–∫–ª—é—á–∞—è –∑–∞–Ω—è—Ç—ã–µ)
        for slot_data in slots:
            slot = create_slot_for_master(master, slot_data)
            master['time_slots'].append(slot)
        
        print(f'‚úÖ {master_name}: —Å–æ–∑–¥–∞–Ω–æ {len(slots)} —Å–ª–æ—Ç–æ–≤')
    
    # –°–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    print('\\nüìã –°–æ–∑–¥–∞—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...')
    
    for booking_data in bookings_data:
        master_name = booking_data['master_name']
        master = find_master_by_name(masters, master_name)
        
        if not master:
            continue
        
        booking = create_booking_for_master(
            master, 
            booking_data['slot_data'], 
            booking_data['client_data']
        )
        
        master['bookings'].append(booking)
    
    print(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(bookings_data)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –±–∞–∑—É
    print('\\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
    save_database(data)
    
    print('\\nüéä –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!')
    print('\\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
    
    for master in masters:
        if master.get('time_slots') or master.get('bookings'):
            name = master.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            slots_count = len(master.get('time_slots', []))
            bookings_count = len(master.get('bookings', []))
            print(f'‚Ä¢ {name}: {slots_count} —Å–ª–æ—Ç–æ–≤, {bookings_count} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π')
    
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    print('\\nüì± –ö–õ–ò–ï–ù–¢–´ –î–õ–Ø –†–ê–°–°–´–õ–ö–ò:')
    clients_for_notification = set()
    
    for master in masters:
        for booking in master.get('bookings', []):
            if booking.get('client_username'):
                clients_for_notification.add(booking['client_username'])
            elif booking.get('client_name'):
                clients_for_notification.add(booking['client_name'])
    
    print(f'\\nüì¨ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ: {len(clients_for_notification)} –∫–ª–∏–µ–Ω—Ç–æ–≤')
    for client in sorted(clients_for_notification):
        print(f'  ‚Ä¢ {client}')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    notification_data = {
        'clients': list(clients_for_notification),
        'migration_date': datetime.now().isoformat(),
        'total_bookings': len(bookings_data)
    }
    
    with open('client_notifications.json', 'w', encoding='utf-8') as f:
        json.dump(notification_data, f, ensure_ascii=False, indent=2)
    
    print(f'\\nüìÑ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ client_notifications.json')

if __name__ == '__main__':
    main()