#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –±–æ—Ç–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ client_notifications_generated.json
"""

import json
import os
import asyncio
import time
from datetime import datetime
from dotenv import load_dotenv
from telegram import Bot

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def load_notifications():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    with open('client_notifications_generated.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def load_database():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è telegram_id –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    with open('data/database.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def find_user_telegram_id(username, database):
    """–ù–∞—Ö–æ–¥–∏—Ç telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username."""
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    clean_username = username.replace('@', '')
    
    # –ò—â–µ–º –≤ –º–∞—Å—Ç–µ—Ä–∞—Ö
    for master in database.get('masters', []):
        master_handle = master.get('telegram_handle', '').replace('@', '')
        if master_handle.lower() == clean_username.lower():
            return master.get('telegram_id'), 'master'
    
    # –ò—â–µ–º –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö (–∫–ª–∏–µ–Ω—Ç—ã)
    for master in database.get('masters', []):
        for booking in master.get('bookings', []):
            client_username = booking.get('client_username', '').replace('@', '')
            if client_username.lower() == clean_username.lower():
                return booking.get('client_telegram_id'), 'client'
    
    return None, None

async def send_notification(bot, telegram_id, message, username):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        await bot.send_message(
            chat_id=telegram_id,
            text=message,
            parse_mode='Markdown'
        )
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {username}: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    print("üì® –ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –ú–ò–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    notifications_data = load_notifications()
    database = load_database()
    notifications = notifications_data.get('notifications', {})
    
    print(f"üë• –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(notifications)}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token or bot_token == 'your_telegram_bot_token_here':
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    bot = Bot(token=bot_token)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏
    sent_count = 0
    failed_count = 0
    not_found_count = 0
    
    print("\\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
    print("-" * 30)
    
    for username, notification_data in notifications.items():
        print(f"\\nüì§ [{sent_count + failed_count + not_found_count + 1}/{len(notifications)}] {username}")
        
        # –ò—â–µ–º telegram_id
        telegram_id, user_type = find_user_telegram_id(username, database)
        
        if not telegram_id:
            print(f"   ‚ö†Ô∏è  Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            not_found_count += 1
            continue
        
        print(f"   üìã ID: {telegram_id} (—Ç–∏–ø: {user_type})")
        message = notification_data.get('message', '')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = await send_notification(bot, telegram_id, message, username)
        
        if success:
            print(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            sent_count += 1
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
            failed_count += 1
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (–∏–∑–±–µ–≥–∞–µ–º rate limiting)
        if sent_count + failed_count < len(notifications):
            await asyncio.sleep(1)
    
    print("\\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –†–ê–°–°–´–õ–ö–ò:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
    print(f"‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {failed_count}")
    print(f"‚ö†Ô∏è  ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {not_found_count}")
    print(f"üìù –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(notifications)}")
    
    if sent_count > 0:
        print("\\nüéä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –±–æ—Ç–∞.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        'timestamp': datetime.now().isoformat(),
        'total_notifications': len(notifications),
        'sent_successfully': sent_count,
        'failed_to_send': failed_count,
        'telegram_id_not_found': not_found_count,
        'sent_to_users': [username for username in notifications.keys()][:sent_count]
    }
    
    with open('migration_broadcast_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ migration_broadcast_results.json")

if __name__ == "__main__":
    asyncio.run(main())