#!/usr/bin/env python3
"""
EMERGENCY DATA RESTORATION
–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ volume –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å
"""

import os
import json
import shutil
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def emergency_restore():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ volume"""
    logger.info("üö® EMERGENCY DATA RESTORATION STARTED")
    
    # –ü—É—Ç–∏
    volume_path = "/app/data"
    local_data_path = "/app/data"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ volume path
    if not os.path.exists(volume_path):
        logger.info(f"üìÅ Creating volume directory: {volume_path}")
        os.makedirs(volume_path, exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö
    local_database_path = "data/database.json"
    if os.path.exists(local_database_path):
        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π database.json, –∫–æ–ø–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        try:
            with open(local_database_path, 'r', encoding='utf-8') as f:
                real_database_content = f.read()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
            json.loads(real_database_content)
            logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã ({len(real_database_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            restore_data = {
                "database.json": real_database_content,
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            # Fallback –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            restore_data = {
                "database.json": '''
{
  "masters": [
    {
      "name": "–ò–≤–∞–Ω –°–ª—ë–∑–∫–∏–Ω",
      "username": "@ivanslyozkin",
      "profile": "–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä",
      "slots": []
    }
  ],
  "bookings": [],
  "devices": [
    {
      "name": "–í–∏–±—Ä–æ–∫—Ä–µ—Å–ª–æ",
      "owner": "@fshubin",
      "admin": true,
      "slots": []
    }
  ]
}''',
            }
    else:
        logger.warning("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π database.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        # –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)
        restore_data = {
            "database.json": '''{
  "masters": [
    {
      "telegram_id": "494449214",
      "name": "–í–∞–Ω—è –°–ª—ë–∑–∫–∏–Ω", 
      "telegram_handle": "@ivanslyozkin",
      "original_description": "–° –¥–µ—Ç—Å—Ç–≤–∞ –ª—é–±–∏–ª –¥–µ–ª–∞—Ç—å –º–∞—Å—Å–∞–∂–∏ –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª –∫–∞–∫ –Ω—É–∂–Ω–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å. –ê —Å 11 –ª–µ—Ç —É –º–µ–Ω—è —É–∂–µ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –±–æ–ª–µ–ª–∞ —Å–ø–∏–Ω–∞ —É —Å–∞–º–æ–≥–æ, —è –ø—Ä–æ—à–µ–ª —Å–ª–æ–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –±—ã–ª –ø—Ä–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω –∫–æ–º–ø—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–ª–æ–º –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞ –∏ –∫—É—á–∞ –≤—Å–µ–≥–æ. –ù–æ, —Å–ø—É—Å—Ç—è –≤—Ä–µ–º—è –∏ –ø—É—Ç–µ–º –ø–µ—Ä–µ–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥–æ–≤ —è –Ω–∞ –Ω–æ–≥–∞—Ö –∏ —Ö–æ—á—É –ø–æ–º–æ–≥–∞—Ç—å –æ–∫—Ä—É–∂–∞—é—â–∏–º —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏. –£—á–∏–ª—Å—è –Ω–∞ –ë–∞–ª–∏, –ª—é–±–ª—é –¥–µ–ª–∞—Ç—å –º–∞—Å—Å–∞–∂ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–º —Ç–æ—á–∫–∞–º, –∏–º–µ—é—Ç—Å—è –∞–ø–ø–ª–∏–∫–∞—Ç–æ—Ä –ö—É–∑–Ω–µ—Ü–æ–≤–∞ –∏ –õ—è–ø–∫–æ, –∞–ø–ø–∞—Ä–∞—Ç compex –¥–ª—è —Ñ–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–∏–∏, –ø–µ—Ä–∫—É—Å–∏–æ–Ω–Ω—ã–π –º–∞—Å—Å–∞–∂–µ—Ä.",
      "services": ["–º–∞—Å—Å–∞–∂"],
      "time_slots": [],
      "is_active": true,
      "created_at": "2025-08-01T17:10:51.511768",
      "bookings": [],
      "location_preference": "–ì–ª—ç–º–ø–∏–Ω–≥ –∏ –°–ø–∞—Å–∞–ª–∫–∞",
      "fantasy_description": "–í —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥–ª—É–±–∏–Ω–∞—Ö –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞, –≥–¥–µ –≤–µ–∫–æ–≤—ã–µ –¥–µ—Ä–µ–≤—å—è —à–µ–ø—á—É—Ç —Ç–∞–π–Ω—ã –∑–¥–æ—Ä–æ–≤—å—è, –æ–±–∏—Ç–∞–µ—Ç –º–∞—Å—Ç–µ—Ä –í–∞–Ω—è –°–ª—ë–∑–∫–∏–Ω. –ï—â—ë –≤ —Ä–∞–Ω–Ω–µ–π —é–Ω–æ—Å—Ç–∏, –æ–Ω –Ω–∞—É—á–∏–ª—Å—è —Å–ª—É—à–∞—Ç—å –ø–µ—Å–Ω–∏ –º—ã—à—Ü –∏ –∏—Å–∫–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—é –≤ –¥–≤–∏–∂–µ–Ω–∏–∏, —Å–∞–º –ø—Ä–µ–æ–¥–æ–ª–µ–≤ –±–æ–ª–µ–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏—Å—Ü–µ–ª–µ–Ω–∏—è."
    },
    {
      "telegram_id": "958532944",
      "name": "–ö–æ–ª—è –ë–æ–≥–∞—Ç–∏—â–µ–≤",
      "telegram_handle": "@nik1678", 
      "original_description": "–Æ–º—ç–π—Ö–æ (—è–ø–æ–Ω—Å–∫–∞—è –º–µ—Ç–æ–¥–∏–∫–∞ –º–∏–æ—Ñ–∞—Å—Ü–∏–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∞–∂–∞)",
      "services": ["–º–∞—Å—Å–∞–∂"],
      "time_slots": [],
      "is_active": true,
      "created_at": "2025-08-01T17:10:51.511768",
      "bookings": [],
      "location_preference": "–ë–∞–Ω—è",
      "fantasy_description": "–ú–∞—Å—Ç–µ—Ä –¥—Ä–µ–≤–Ω–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –ö–æ–ª—è –ë–æ–≥–∞—Ç–∏—â–µ–≤ –≤–ª–∞–¥–µ–µ—Ç —Ç–∞–π–Ω—ã–º –∏—Å–∫—É—Å—Å—Ç–≤–æ–º –Æ–º—ç–π—Ö–æ - —è–ø–æ–Ω—Å–∫–æ–π –º–µ—Ç–æ–¥–∏–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –º—ã—à—Ü—ã –æ—Ç –æ–∫–æ–≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–ª—É —É—Ç—Ä–∞—á–µ–Ω–Ω—É—é –≥–∞—Ä–º–æ–Ω–∏—é."
    }
  ],
  "bookings": [],
  "device_bookings": [],
  "devices": [
    {
      "id": "vibro_chair",
      "name": "–í–∏–±—Ä–æ–∫—Ä–µ—Å–ª–æ",
      "owner_telegram_handle": "@fshubin",
      "admin": true,
      "slots": [],
      "bookings": []
    }
  ],
  "stats": {
    "total_masters": 2,
    "total_bookings": 0,
    "total_devices": 1,
    "last_updated": "2025-08-02T13:47:00.000000"
  }
}''',
            }
    
    # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º bug_reports.json  
    restore_data["bug_reports.json"] = '''
{
  "reports": []
}'''
    
    logger.info("üìã Restoring critical data files...")
    
    for filename, content in restore_data.items():
        file_path = os.path.join(volume_path, filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ñ–∞–π–ª
        needs_restore = False
        
        if not os.path.exists(file_path):
            needs_restore = True
            logger.info(f"üíæ {filename} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        elif filename == "database.json" and os.path.getsize(file_path) < 50000:  # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –¥–ª—è database.json
            needs_restore = True
            current_size = os.path.getsize(file_path)
            logger.info(f"üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ï–†–ï–ó–ê–ü–ò–°–¨ {filename} ({current_size} –±–∞–π—Ç < 50KB), –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ")
        elif os.path.getsize(file_path) < 100:  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            needs_restore = True
            current_size = os.path.getsize(file_path)
            logger.info(f"üíæ {filename} —Å–ª–∏—à–∫–æ–º –º–∞–ª ({current_size} –±–∞–π—Ç), –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º")
        
        if needs_restore:
            logger.info(f"üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–ï–†–ï–ó–ê–ü–ò–°–´–í–ê–ï–ú {filename}")
            
            # –°–æ–∑–¥–∞–µ–º backup –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é
            if os.path.exists(file_path):
                backup_path = file_path + f".backup_{datetime.now().strftime('%H%M%S')}"
                import shutil
                shutil.copy2(file_path, backup_path)
                logger.info(f"üíæ Backup —Å–æ–∑–¥–∞–Ω: {backup_path}")
            
            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                if isinstance(content, str):
                    # –ï—Å–ª–∏ content —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ JSON
                    json.dump(json.loads(content), f, ensure_ascii=False, indent=2)
                else:
                    # –ï—Å–ª–∏ content —É–∂–µ dict, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
                    json.dump(content, f, ensure_ascii=False, indent=2)
            
            new_size = os.path.getsize(file_path)
            logger.info(f"‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –°–û–ó–î–ê–ù {filename} ({new_size} –±–∞–π—Ç)")
        else:
            current_size = os.path.getsize(file_path)
            logger.info(f"‚úÖ {filename} already exists and looks good ({current_size} –±–∞–π—Ç)")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É backups
    backups_path = os.path.join(volume_path, "backups")
    if not os.path.exists(backups_path):
        os.makedirs(backups_path, exist_ok=True)
        logger.info(f"üìÅ Created backups directory: {backups_path}")
    
    # –°–æ–∑–¥–∞–µ–º emergency backup —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    backup_filename = f"emergency_restore_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    backup_path = os.path.join(backups_path, backup_filename)
    
    # –ö–æ–ø–∏—Ä—É–µ–º database.json –≤ backup
    database_path = os.path.join(volume_path, "database.json")
    if os.path.exists(database_path):
        shutil.copy2(database_path, backup_path)
        logger.info(f"üíæ Created emergency backup: {backup_filename}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logger.info("üìä Final volume contents:")
    for root, dirs, files in os.walk(volume_path):
        level = root.replace(volume_path, '').count(os.sep)
        indent = ' ' * 2 * level
        logger.info(f"{indent}{os.path.basename(root)}/")
        subindent = ' ' * 2 * (level + 1)
        for file in files:
            file_path = os.path.join(root, file)
            size = os.path.getsize(file_path)
            logger.info(f"{subindent}{file} ({size} bytes)")
    
    logger.info("‚úÖ EMERGENCY DATA RESTORATION COMPLETED")
    return True

if __name__ == "__main__":
    emergency_restore()